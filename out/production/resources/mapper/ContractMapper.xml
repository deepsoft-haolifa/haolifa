<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.deepsoft.haolifa.dao.repository.ContractMapper">
  <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.Contract">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="order_no" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="contract_name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="contract_type" javaType="java.lang.Byte" jdbcType="TINYINT" />
      <arg column="contract_duration" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="contract_subject" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="total_amount" javaType="java.math.BigDecimal" jdbcType="DECIMAL" />
      <arg column="contract_party" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="address" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="linkman" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="linkman_phone" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="leader" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="leader_phone" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="payment_cycle" javaType="java.lang.Byte" jdbcType="TINYINT" />
      <arg column="payment_mode" javaType="java.lang.Byte" jdbcType="TINYINT" />
      <arg column="contract_summary" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="accessory" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="create_user_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="is_delete" javaType="java.lang.Byte" jdbcType="TINYINT" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, order_no, contract_name, contract_type, contract_duration, contract_subject, 
    total_amount, contract_party, address, linkman, linkman_phone, leader, leader_phone, 
    payment_cycle, payment_mode, contract_summary, accessory, create_user_id, is_delete, 
    create_time, update_time
  </sql>
  <select id="selectByExample" parameterType="com.deepsoft.haolifa.model.domain.ContractExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from contract
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from contract
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from contract
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.ContractExample">
    delete from contract
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.Contract">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into contract (order_no, contract_name, contract_type, 
      contract_duration, contract_subject, total_amount, 
      contract_party, address, linkman, 
      linkman_phone, leader, leader_phone, 
      payment_cycle, payment_mode, contract_summary, 
      accessory, create_user_id, is_delete, 
      create_time, update_time)
    values (#{orderNo,jdbcType=VARCHAR}, #{contractName,jdbcType=VARCHAR}, #{contractType,jdbcType=TINYINT}, 
      #{contractDuration,jdbcType=VARCHAR}, #{contractSubject,jdbcType=VARCHAR}, #{totalAmount,jdbcType=DECIMAL}, 
      #{contractParty,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{linkman,jdbcType=VARCHAR}, 
      #{linkmanPhone,jdbcType=VARCHAR}, #{leader,jdbcType=VARCHAR}, #{leaderPhone,jdbcType=VARCHAR}, 
      #{paymentCycle,jdbcType=TINYINT}, #{paymentMode,jdbcType=TINYINT}, #{contractSummary,jdbcType=VARCHAR}, 
      #{accessory,jdbcType=VARCHAR}, #{createUserId,jdbcType=INTEGER}, #{isDelete,jdbcType=TINYINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.Contract">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into contract
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderNo != null">
        order_no,
      </if>
      <if test="contractName != null">
        contract_name,
      </if>
      <if test="contractType != null">
        contract_type,
      </if>
      <if test="contractDuration != null">
        contract_duration,
      </if>
      <if test="contractSubject != null">
        contract_subject,
      </if>
      <if test="totalAmount != null">
        total_amount,
      </if>
      <if test="contractParty != null">
        contract_party,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="linkman != null">
        linkman,
      </if>
      <if test="linkmanPhone != null">
        linkman_phone,
      </if>
      <if test="leader != null">
        leader,
      </if>
      <if test="leaderPhone != null">
        leader_phone,
      </if>
      <if test="paymentCycle != null">
        payment_cycle,
      </if>
      <if test="paymentMode != null">
        payment_mode,
      </if>
      <if test="contractSummary != null">
        contract_summary,
      </if>
      <if test="accessory != null">
        accessory,
      </if>
      <if test="createUserId != null">
        create_user_id,
      </if>
      <if test="isDelete != null">
        is_delete,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="orderNo != null">
        #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="contractName != null">
        #{contractName,jdbcType=VARCHAR},
      </if>
      <if test="contractType != null">
        #{contractType,jdbcType=TINYINT},
      </if>
      <if test="contractDuration != null">
        #{contractDuration,jdbcType=VARCHAR},
      </if>
      <if test="contractSubject != null">
        #{contractSubject,jdbcType=VARCHAR},
      </if>
      <if test="totalAmount != null">
        #{totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="contractParty != null">
        #{contractParty,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="linkman != null">
        #{linkman,jdbcType=VARCHAR},
      </if>
      <if test="linkmanPhone != null">
        #{linkmanPhone,jdbcType=VARCHAR},
      </if>
      <if test="leader != null">
        #{leader,jdbcType=VARCHAR},
      </if>
      <if test="leaderPhone != null">
        #{leaderPhone,jdbcType=VARCHAR},
      </if>
      <if test="paymentCycle != null">
        #{paymentCycle,jdbcType=TINYINT},
      </if>
      <if test="paymentMode != null">
        #{paymentMode,jdbcType=TINYINT},
      </if>
      <if test="contractSummary != null">
        #{contractSummary,jdbcType=VARCHAR},
      </if>
      <if test="accessory != null">
        #{accessory,jdbcType=VARCHAR},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="isDelete != null">
        #{isDelete,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.ContractExample" resultType="java.lang.Long">
    select count(*) from contract
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update contract
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderNo != null">
        order_no = #{record.orderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.contractName != null">
        contract_name = #{record.contractName,jdbcType=VARCHAR},
      </if>
      <if test="record.contractType != null">
        contract_type = #{record.contractType,jdbcType=TINYINT},
      </if>
      <if test="record.contractDuration != null">
        contract_duration = #{record.contractDuration,jdbcType=VARCHAR},
      </if>
      <if test="record.contractSubject != null">
        contract_subject = #{record.contractSubject,jdbcType=VARCHAR},
      </if>
      <if test="record.totalAmount != null">
        total_amount = #{record.totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.contractParty != null">
        contract_party = #{record.contractParty,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.linkman != null">
        linkman = #{record.linkman,jdbcType=VARCHAR},
      </if>
      <if test="record.linkmanPhone != null">
        linkman_phone = #{record.linkmanPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.leader != null">
        leader = #{record.leader,jdbcType=VARCHAR},
      </if>
      <if test="record.leaderPhone != null">
        leader_phone = #{record.leaderPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.paymentCycle != null">
        payment_cycle = #{record.paymentCycle,jdbcType=TINYINT},
      </if>
      <if test="record.paymentMode != null">
        payment_mode = #{record.paymentMode,jdbcType=TINYINT},
      </if>
      <if test="record.contractSummary != null">
        contract_summary = #{record.contractSummary,jdbcType=VARCHAR},
      </if>
      <if test="record.accessory != null">
        accessory = #{record.accessory,jdbcType=VARCHAR},
      </if>
      <if test="record.createUserId != null">
        create_user_id = #{record.createUserId,jdbcType=INTEGER},
      </if>
      <if test="record.isDelete != null">
        is_delete = #{record.isDelete,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update contract
    set id = #{record.id,jdbcType=INTEGER},
      order_no = #{record.orderNo,jdbcType=VARCHAR},
      contract_name = #{record.contractName,jdbcType=VARCHAR},
      contract_type = #{record.contractType,jdbcType=TINYINT},
      contract_duration = #{record.contractDuration,jdbcType=VARCHAR},
      contract_subject = #{record.contractSubject,jdbcType=VARCHAR},
      total_amount = #{record.totalAmount,jdbcType=DECIMAL},
      contract_party = #{record.contractParty,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR},
      linkman = #{record.linkman,jdbcType=VARCHAR},
      linkman_phone = #{record.linkmanPhone,jdbcType=VARCHAR},
      leader = #{record.leader,jdbcType=VARCHAR},
      leader_phone = #{record.leaderPhone,jdbcType=VARCHAR},
      payment_cycle = #{record.paymentCycle,jdbcType=TINYINT},
      payment_mode = #{record.paymentMode,jdbcType=TINYINT},
      contract_summary = #{record.contractSummary,jdbcType=VARCHAR},
      accessory = #{record.accessory,jdbcType=VARCHAR},
      create_user_id = #{record.createUserId,jdbcType=INTEGER},
      is_delete = #{record.isDelete,jdbcType=TINYINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.Contract">
    update contract
    <set>
      <if test="orderNo != null">
        order_no = #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="contractName != null">
        contract_name = #{contractName,jdbcType=VARCHAR},
      </if>
      <if test="contractType != null">
        contract_type = #{contractType,jdbcType=TINYINT},
      </if>
      <if test="contractDuration != null">
        contract_duration = #{contractDuration,jdbcType=VARCHAR},
      </if>
      <if test="contractSubject != null">
        contract_subject = #{contractSubject,jdbcType=VARCHAR},
      </if>
      <if test="totalAmount != null">
        total_amount = #{totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="contractParty != null">
        contract_party = #{contractParty,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="linkman != null">
        linkman = #{linkman,jdbcType=VARCHAR},
      </if>
      <if test="linkmanPhone != null">
        linkman_phone = #{linkmanPhone,jdbcType=VARCHAR},
      </if>
      <if test="leader != null">
        leader = #{leader,jdbcType=VARCHAR},
      </if>
      <if test="leaderPhone != null">
        leader_phone = #{leaderPhone,jdbcType=VARCHAR},
      </if>
      <if test="paymentCycle != null">
        payment_cycle = #{paymentCycle,jdbcType=TINYINT},
      </if>
      <if test="paymentMode != null">
        payment_mode = #{paymentMode,jdbcType=TINYINT},
      </if>
      <if test="contractSummary != null">
        contract_summary = #{contractSummary,jdbcType=VARCHAR},
      </if>
      <if test="accessory != null">
        accessory = #{accessory,jdbcType=VARCHAR},
      </if>
      <if test="createUserId != null">
        create_user_id = #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="isDelete != null">
        is_delete = #{isDelete,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.Contract">
    update contract
    set order_no = #{orderNo,jdbcType=VARCHAR},
      contract_name = #{contractName,jdbcType=VARCHAR},
      contract_type = #{contractType,jdbcType=TINYINT},
      contract_duration = #{contractDuration,jdbcType=VARCHAR},
      contract_subject = #{contractSubject,jdbcType=VARCHAR},
      total_amount = #{totalAmount,jdbcType=DECIMAL},
      contract_party = #{contractParty,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      linkman = #{linkman,jdbcType=VARCHAR},
      linkman_phone = #{linkmanPhone,jdbcType=VARCHAR},
      leader = #{leader,jdbcType=VARCHAR},
      leader_phone = #{leaderPhone,jdbcType=VARCHAR},
      payment_cycle = #{paymentCycle,jdbcType=TINYINT},
      payment_mode = #{paymentMode,jdbcType=TINYINT},
      contract_summary = #{contractSummary,jdbcType=VARCHAR},
      accessory = #{accessory,jdbcType=VARCHAR},
      create_user_id = #{createUserId,jdbcType=INTEGER},
      is_delete = #{isDelete,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>