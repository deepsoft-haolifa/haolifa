<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.deepsoft.haolifa.dao.repository.PriceMaterialMapper" >
  <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.PriceMaterial" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="material_classify_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="material_classify_name" jdbcType="CHAR" javaType="java.lang.String" />
      <arg column="name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="graph_no" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="model" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="specifications" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="material" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="unit" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="actual_weight" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="tax_rate" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="ton_price" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="blank_cost" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="blank_cost_tax" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="process_cost" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="spray_cost" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="price" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="price_tax" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="create_user" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="update_user" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, material_classify_id, material_classify_name, name, graph_no, model, specifications, 
    material, unit, actual_weight, tax_rate, ton_price, blank_cost, blank_cost_tax, process_cost, 
    spray_cost, price, price_tax, create_time, update_time, create_user, update_user
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.deepsoft.haolifa.model.domain.PriceMaterialExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from price_material
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from price_material
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from price_material
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.PriceMaterialExample" >
    delete from price_material
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.PriceMaterial" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into price_material (material_classify_id, material_classify_name, 
      name, graph_no, model, 
      specifications, material, unit, 
      actual_weight, tax_rate, ton_price, 
      blank_cost, blank_cost_tax, process_cost, 
      spray_cost, price, price_tax, 
      create_time, update_time, create_user, 
      update_user)
    values (#{materialClassifyId,jdbcType=INTEGER}, #{materialClassifyName,jdbcType=CHAR}, 
      #{name,jdbcType=VARCHAR}, #{graphNo,jdbcType=VARCHAR}, #{model,jdbcType=VARCHAR}, 
      #{specifications,jdbcType=VARCHAR}, #{material,jdbcType=VARCHAR}, #{unit,jdbcType=VARCHAR}, 
      #{actualWeight,jdbcType=VARCHAR}, #{taxRate,jdbcType=VARCHAR}, #{tonPrice,jdbcType=DECIMAL}, 
      #{blankCost,jdbcType=DECIMAL}, #{blankCostTax,jdbcType=DECIMAL}, #{processCost,jdbcType=DECIMAL}, 
      #{sprayCost,jdbcType=DECIMAL}, #{price,jdbcType=DECIMAL}, #{priceTax,jdbcType=DECIMAL}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{createUser,jdbcType=INTEGER}, 
      #{updateUser,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.PriceMaterial" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into price_material
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="materialClassifyId != null" >
        material_classify_id,
      </if>
      <if test="materialClassifyName != null" >
        material_classify_name,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="graphNo != null" >
        graph_no,
      </if>
      <if test="model != null" >
        model,
      </if>
      <if test="specifications != null" >
        specifications,
      </if>
      <if test="material != null" >
        material,
      </if>
      <if test="unit != null" >
        unit,
      </if>
      <if test="actualWeight != null" >
        actual_weight,
      </if>
      <if test="taxRate != null" >
        tax_rate,
      </if>
      <if test="tonPrice != null" >
        ton_price,
      </if>
      <if test="blankCost != null" >
        blank_cost,
      </if>
      <if test="blankCostTax != null" >
        blank_cost_tax,
      </if>
      <if test="processCost != null" >
        process_cost,
      </if>
      <if test="sprayCost != null" >
        spray_cost,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="priceTax != null" >
        price_tax,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="createUser != null" >
        create_user,
      </if>
      <if test="updateUser != null" >
        update_user,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="materialClassifyId != null" >
        #{materialClassifyId,jdbcType=INTEGER},
      </if>
      <if test="materialClassifyName != null" >
        #{materialClassifyName,jdbcType=CHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="graphNo != null" >
        #{graphNo,jdbcType=VARCHAR},
      </if>
      <if test="model != null" >
        #{model,jdbcType=VARCHAR},
      </if>
      <if test="specifications != null" >
        #{specifications,jdbcType=VARCHAR},
      </if>
      <if test="material != null" >
        #{material,jdbcType=VARCHAR},
      </if>
      <if test="unit != null" >
        #{unit,jdbcType=VARCHAR},
      </if>
      <if test="actualWeight != null" >
        #{actualWeight,jdbcType=VARCHAR},
      </if>
      <if test="taxRate != null" >
        #{taxRate,jdbcType=VARCHAR},
      </if>
      <if test="tonPrice != null" >
        #{tonPrice,jdbcType=DECIMAL},
      </if>
      <if test="blankCost != null" >
        #{blankCost,jdbcType=DECIMAL},
      </if>
      <if test="blankCostTax != null" >
        #{blankCostTax,jdbcType=DECIMAL},
      </if>
      <if test="processCost != null" >
        #{processCost,jdbcType=DECIMAL},
      </if>
      <if test="sprayCost != null" >
        #{sprayCost,jdbcType=DECIMAL},
      </if>
      <if test="price != null" >
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="priceTax != null" >
        #{priceTax,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        #{createUser,jdbcType=INTEGER},
      </if>
      <if test="updateUser != null" >
        #{updateUser,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.PriceMaterialExample" resultType="java.lang.Integer" >
    select count(*) from price_material
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update price_material
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.materialClassifyId != null" >
        material_classify_id = #{record.materialClassifyId,jdbcType=INTEGER},
      </if>
      <if test="record.materialClassifyName != null" >
        material_classify_name = #{record.materialClassifyName,jdbcType=CHAR},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.graphNo != null" >
        graph_no = #{record.graphNo,jdbcType=VARCHAR},
      </if>
      <if test="record.model != null" >
        model = #{record.model,jdbcType=VARCHAR},
      </if>
      <if test="record.specifications != null" >
        specifications = #{record.specifications,jdbcType=VARCHAR},
      </if>
      <if test="record.material != null" >
        material = #{record.material,jdbcType=VARCHAR},
      </if>
      <if test="record.unit != null" >
        unit = #{record.unit,jdbcType=VARCHAR},
      </if>
      <if test="record.actualWeight != null" >
        actual_weight = #{record.actualWeight,jdbcType=VARCHAR},
      </if>
      <if test="record.taxRate != null" >
        tax_rate = #{record.taxRate,jdbcType=VARCHAR},
      </if>
      <if test="record.tonPrice != null" >
        ton_price = #{record.tonPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.blankCost != null" >
        blank_cost = #{record.blankCost,jdbcType=DECIMAL},
      </if>
      <if test="record.blankCostTax != null" >
        blank_cost_tax = #{record.blankCostTax,jdbcType=DECIMAL},
      </if>
      <if test="record.processCost != null" >
        process_cost = #{record.processCost,jdbcType=DECIMAL},
      </if>
      <if test="record.sprayCost != null" >
        spray_cost = #{record.sprayCost,jdbcType=DECIMAL},
      </if>
      <if test="record.price != null" >
        price = #{record.price,jdbcType=DECIMAL},
      </if>
      <if test="record.priceTax != null" >
        price_tax = #{record.priceTax,jdbcType=DECIMAL},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUser != null" >
        create_user = #{record.createUser,jdbcType=INTEGER},
      </if>
      <if test="record.updateUser != null" >
        update_user = #{record.updateUser,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update price_material
    set id = #{record.id,jdbcType=INTEGER},
      material_classify_id = #{record.materialClassifyId,jdbcType=INTEGER},
      material_classify_name = #{record.materialClassifyName,jdbcType=CHAR},
      name = #{record.name,jdbcType=VARCHAR},
      graph_no = #{record.graphNo,jdbcType=VARCHAR},
      model = #{record.model,jdbcType=VARCHAR},
      specifications = #{record.specifications,jdbcType=VARCHAR},
      material = #{record.material,jdbcType=VARCHAR},
      unit = #{record.unit,jdbcType=VARCHAR},
      actual_weight = #{record.actualWeight,jdbcType=VARCHAR},
      tax_rate = #{record.taxRate,jdbcType=VARCHAR},
      ton_price = #{record.tonPrice,jdbcType=DECIMAL},
      blank_cost = #{record.blankCost,jdbcType=DECIMAL},
      blank_cost_tax = #{record.blankCostTax,jdbcType=DECIMAL},
      process_cost = #{record.processCost,jdbcType=DECIMAL},
      spray_cost = #{record.sprayCost,jdbcType=DECIMAL},
      price = #{record.price,jdbcType=DECIMAL},
      price_tax = #{record.priceTax,jdbcType=DECIMAL},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_user = #{record.createUser,jdbcType=INTEGER},
      update_user = #{record.updateUser,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.PriceMaterial" >
    update price_material
    <set >
      <if test="materialClassifyId != null" >
        material_classify_id = #{materialClassifyId,jdbcType=INTEGER},
      </if>
      <if test="materialClassifyName != null" >
        material_classify_name = #{materialClassifyName,jdbcType=CHAR},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="graphNo != null" >
        graph_no = #{graphNo,jdbcType=VARCHAR},
      </if>
      <if test="model != null" >
        model = #{model,jdbcType=VARCHAR},
      </if>
      <if test="specifications != null" >
        specifications = #{specifications,jdbcType=VARCHAR},
      </if>
      <if test="material != null" >
        material = #{material,jdbcType=VARCHAR},
      </if>
      <if test="unit != null" >
        unit = #{unit,jdbcType=VARCHAR},
      </if>
      <if test="actualWeight != null" >
        actual_weight = #{actualWeight,jdbcType=VARCHAR},
      </if>
      <if test="taxRate != null" >
        tax_rate = #{taxRate,jdbcType=VARCHAR},
      </if>
      <if test="tonPrice != null" >
        ton_price = #{tonPrice,jdbcType=DECIMAL},
      </if>
      <if test="blankCost != null" >
        blank_cost = #{blankCost,jdbcType=DECIMAL},
      </if>
      <if test="blankCostTax != null" >
        blank_cost_tax = #{blankCostTax,jdbcType=DECIMAL},
      </if>
      <if test="processCost != null" >
        process_cost = #{processCost,jdbcType=DECIMAL},
      </if>
      <if test="sprayCost != null" >
        spray_cost = #{sprayCost,jdbcType=DECIMAL},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="priceTax != null" >
        price_tax = #{priceTax,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        create_user = #{createUser,jdbcType=INTEGER},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.PriceMaterial" >
    update price_material
    set material_classify_id = #{materialClassifyId,jdbcType=INTEGER},
      material_classify_name = #{materialClassifyName,jdbcType=CHAR},
      name = #{name,jdbcType=VARCHAR},
      graph_no = #{graphNo,jdbcType=VARCHAR},
      model = #{model,jdbcType=VARCHAR},
      specifications = #{specifications,jdbcType=VARCHAR},
      material = #{material,jdbcType=VARCHAR},
      unit = #{unit,jdbcType=VARCHAR},
      actual_weight = #{actualWeight,jdbcType=VARCHAR},
      tax_rate = #{taxRate,jdbcType=VARCHAR},
      ton_price = #{tonPrice,jdbcType=DECIMAL},
      blank_cost = #{blankCost,jdbcType=DECIMAL},
      blank_cost_tax = #{blankCostTax,jdbcType=DECIMAL},
      process_cost = #{processCost,jdbcType=DECIMAL},
      spray_cost = #{sprayCost,jdbcType=DECIMAL},
      price = #{price,jdbcType=DECIMAL},
      price_tax = #{priceTax,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=INTEGER},
      update_user = #{updateUser,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>