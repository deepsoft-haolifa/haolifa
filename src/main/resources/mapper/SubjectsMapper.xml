<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.deepsoft.haolifa.dao.repository.SubjectsMapper">
    <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.BizSubjects">
        <constructor>
            <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
            <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
            <arg column="type" javaType="java.lang.String" jdbcType="VARCHAR" />
            <arg column="parent_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
            <arg column="level" javaType="java.lang.Integer" jdbcType="INTEGER" />
            <arg column="code" javaType="java.lang.String" jdbcType="VARCHAR" />
            <arg column="remark" javaType="java.lang.String" jdbcType="VARCHAR" />
            <arg column="status" javaType="java.lang.String" jdbcType="CHAR" />
            <arg column="del_flag" javaType="java.lang.String" jdbcType="CHAR" />
            <arg column="percent" javaType="java.lang.Double" jdbcType="FLOAT" />
            <arg column="create_user" javaType="java.lang.Integer" jdbcType="INTEGER" />
            <arg column="update_user" javaType="java.lang.Integer" jdbcType="INTEGER" />
            <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
            <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
        </constructor>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, create_time, update_time, create_user, update_user, name, type, parent_id,
    level, code, remark,status,del_flag,percent
    </sql>
    <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.BizSubjects" >
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into biz_subjects
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="name != null" >
                name,
            </if>
            <if test="type != null" >
                type,
            </if>
            <if test="status != null" >
                status,
            </if>
            <if test="remark != null" >
                remark,
            </if>
            <if test="delFlag != null" >
                del_flag,
            </if>
            <if test="code != null" >
                code,
            </if>
            <if test="parentId != null" >
                parent_id,
            </if>
            <if test="percent != null" >
                percent,
            </if>
            <if test="createTime != null" >
                create_time,
            </if>
            <if test="updateTime != null" >
                update_time,
            </if>
            <if test="createUser != null" >
                create_user,
            </if>
            <if test="updateUser != null" >
                update_user,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="name != null" >
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="type != null" >
                #{type,jdbcType=VARCHAR},
            </if>
            <if test="status != null" >
                #{status,jdbcType=VARCHAR},
            </if>
            <if test="remark != null" >
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="delFlag != null" >
                #{status,jdbcType=CHAR},
            </if>
            <if test="code != null" >
                #{code,jdbcType=VARCHAR},
            </if>
            <if test="parentId != null" >
                #{parentId,jdbcType=INTEGER},
            </if>
            <if test="percent != null" >
                #{percent,jdbcType=FLOAT},
            </if>
            <if test="createTime != null" >
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null" >
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createUser != null" >
                #{createUser,jdbcType=INTEGER},
            </if>
            <if test="updateUser != null" >
                #{updateUser,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="selectByExample" parameterType="com.deepsoft.haolifa.model.domain.BizSubjectsExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List" />
        from biz_subjects
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from biz_subjects
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from biz_subjects
    where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.BizSubjectsExample">
        delete from biz_subject
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </delete>
    <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.BizSubjects">
    insert into biz_subject (id, create_time, update_time,
    create_user, update_user, name,
    type, parent_id, remark,
    status, level,code,del_flag,percent)
    values (#{id,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP},
    #{createUser,jdbcType=INTEGER}, #{updateUser,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
    #{type,jdbcType=VARCHAR}, #{parentId,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR},
    #{status,jdbcType=CHAR}, #{level,jdbcType=TINYINT}, #{code,jdbcType=VARCHAR}, #{delFlag,jdbcType=VARCHAR}, #{percent,jdbcType=FLOAT})
    </insert>

    <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.BizSubjectsExample" resultType="java.lang.Long">
        select count(*) from store_room_rack
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update biz_subjects
        <set>

            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.createUser != null">
                create_user = #{record.createUser,jdbcType=INTEGER},
            </if>
            <if test="record.updateUser != null">
                update_user = #{record.updateUser,jdbcType=INTEGER},
            </if>
            <if test="record.type != null">
                type = #{record.type,jdbcType=VARCHAR},
            </if>
            <if test="record.name != null">
                name = #{record.name,jdbcType=VARCHAR},
            </if>
            <if test="record.level != null">
                level = #{record.level,jdbcType=TINYINT},
            </if>
            <if test="record.remark != null">
                remark = #{record.remark,jdbcType=VARCHAR},
            </if>
            <if test="record.code != null">
                code = #{record.code,jdbcType=VARCHAR},
            </if>
            <if test="record.parentId != null">
                parent_id = #{record.parentId,jdbcType=INTEGER},
            </if>
            <if test="record.percent != null">
                percent = #{record.percent,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update biz_subjects
        set create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        create_user = #{record.createUser,jdbcType=INTEGER},
        update_user = #{record.updateUser,jdbcType=INTEGER},
        name = #{record.name,jdbcType=VARCHAR},
        type = #{record.rackNo,jdbcType=VARCHAR},
        parent_id = #{record.parentId,jdbcType=INTEGER},
        remark = #{record.remark,jdbcType=VARCHAR},
        status = #{record.status,jdbcType=VARCHAR},
        del_flag = #{record.delFlag,jdbcType=VARCHAR},
        level = #{record.isDelete,jdbcType=TINYINT},
        percent = #{record.percent,jdbcType=FLOAT},
        code = #{record.rackName,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.BizSubjects">
        update biz_subjects
        <set>

            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createUser != null">
                create_user = #{createUser,jdbcType=INTEGER},
            </if>
            <if test="updateUser != null">
                update_user = #{updateUser,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="level != null">
                status = #{level,jdbcType=TINYINT},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="code != null">
                code = #{code,jdbcType=VARCHAR},
            </if>
            <if test="parentId != null">
                parent_id = #{parentIdjdbcType=INTEGER},
            </if>
            <if test="percent != null">
                percent = #{rpercent,jdbcType=FLOAT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.BizSubjects">
    update biz_subjects
    set create_time = #{createTime,jdbcType=TIMESTAMP},
    update_time = #{updateTime,jdbcType=TIMESTAMP},
    create_user = #{createUser,jdbcType=INTEGER},
    update_user = #{updateUser,jdbcType=INTEGER},
    name = #{name,jdbcType=VARCHAR},
    type = #{rackNo,jdbcType=VARCHAR},
    parent_id = #{parentId,jdbcType=INTEGER},
    remark = #{remark,jdbcType=VARCHAR},
    status = #{status,jdbcType=VARCHAR},
    del_flag = #{delFlag,jdbcType=VARCHAR},
    level = #{isDelete,jdbcType=TINYINT},
    percent = #{percent,jdbcType=FLOAT},
    code = #{rackName,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>
