<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.deepsoft.haolifa.dao.repository.BizPayPlanPayLogMapper">
  <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.BizPayPlanPayLog">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="pay_plan_id" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="contract_id" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="contract_no" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="apply_amount" javaType="java.math.BigDecimal" jdbcType="DECIMAL" />
      <arg column="pay_way" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="pay_account" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="pay_date" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="booking_type" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="apply_status" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="remark" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="del_flag" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="create_user" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_user" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, pay_plan_id, contract_id, contract_no, apply_amount, pay_way, pay_account, pay_date,
    booking_type, apply_status, remark, del_flag, create_user, create_time, update_user,
    update_time
  </sql>
  <select id="selectByExample" parameterType="com.deepsoft.haolifa.model.domain.BizPayPlanPayLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from biz_pay_plan_pay_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from biz_pay_plan_pay_log
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from biz_pay_plan_pay_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.BizPayPlanPayLogExample">
    delete from biz_pay_plan_pay_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.BizPayPlanPayLog">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into biz_pay_plan_pay_log (pay_plan_id, contract_id, contract_no,
      apply_amount, pay_way, pay_account,
      pay_date, booking_type, apply_status,
      remark, del_flag, create_user,
      create_time, update_user, update_time
      )
    values (#{payPlanId,jdbcType=BIGINT}, #{contractId,jdbcType=VARCHAR}, #{contractNo,jdbcType=VARCHAR},
      #{applyAmount,jdbcType=DECIMAL}, #{payWay,jdbcType=VARCHAR}, #{payAccount,jdbcType=VARCHAR},
      #{payDate,jdbcType=TIMESTAMP}, #{bookingType,jdbcType=VARCHAR}, #{applyStatus,jdbcType=CHAR},
      #{remark,jdbcType=VARCHAR}, #{delFlag,jdbcType=CHAR}, #{createUser,jdbcType=INTEGER},
      #{createTime,jdbcType=TIMESTAMP}, #{updateUser,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.BizPayPlanPayLog">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into biz_pay_plan_pay_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="payPlanId != null">
        pay_plan_id,
      </if>
      <if test="contractId != null">
        contract_id,
      </if>
      <if test="contractNo != null">
        contract_no,
      </if>
      <if test="applyAmount != null">
        apply_amount,
      </if>
      <if test="payWay != null">
        pay_way,
      </if>
      <if test="payAccount != null">
        pay_account,
      </if>
      <if test="payDate != null">
        pay_date,
      </if>
      <if test="bookingType != null">
        booking_type,
      </if>
      <if test="applyStatus != null">
        apply_status,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="delFlag != null">
        del_flag,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="payPlanId != null">
        #{payPlanId,jdbcType=BIGINT},
      </if>
      <if test="contractId != null">
        #{contractId,jdbcType=VARCHAR},
      </if>
      <if test="contractNo != null">
        #{contractNo,jdbcType=VARCHAR},
      </if>
      <if test="applyAmount != null">
        #{applyAmount,jdbcType=DECIMAL},
      </if>
      <if test="payWay != null">
        #{payWay,jdbcType=VARCHAR},
      </if>
      <if test="payAccount != null">
        #{payAccount,jdbcType=VARCHAR},
      </if>
      <if test="payDate != null">
        #{payDate,jdbcType=TIMESTAMP},
      </if>
      <if test="bookingType != null">
        #{bookingType,jdbcType=VARCHAR},
      </if>
      <if test="applyStatus != null">
        #{applyStatus,jdbcType=CHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=CHAR},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.BizPayPlanPayLogExample" resultType="java.lang.Integer">
    select count(*) from biz_pay_plan_pay_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update biz_pay_plan_pay_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.payPlanId != null">
        pay_plan_id = #{record.payPlanId,jdbcType=BIGINT},
      </if>
      <if test="record.contractId != null">
        contract_id = #{record.contractId,jdbcType=VARCHAR},
      </if>
      <if test="record.contractNo != null">
        contract_no = #{record.contractNo,jdbcType=VARCHAR},
      </if>
      <if test="record.applyAmount != null">
        apply_amount = #{record.applyAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.payWay != null">
        pay_way = #{record.payWay,jdbcType=VARCHAR},
      </if>
      <if test="record.payAccount != null">
        pay_account = #{record.payAccount,jdbcType=VARCHAR},
      </if>
      <if test="record.payDate != null">
        pay_date = #{record.payDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.bookingType != null">
        booking_type = #{record.bookingType,jdbcType=VARCHAR},
      </if>
      <if test="record.applyStatus != null">
        apply_status = #{record.applyStatus,jdbcType=CHAR},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.delFlag != null">
        del_flag = #{record.delFlag,jdbcType=CHAR},
      </if>
      <if test="record.createUser != null">
        create_user = #{record.createUser,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateUser != null">
        update_user = #{record.updateUser,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update biz_pay_plan_pay_log
    set id = #{record.id,jdbcType=INTEGER},
      pay_plan_id = #{record.payPlanId,jdbcType=BIGINT},
      contract_id = #{record.contractId,jdbcType=VARCHAR},
      contract_no = #{record.contractNo,jdbcType=VARCHAR},
      apply_amount = #{record.applyAmount,jdbcType=DECIMAL},
      pay_way = #{record.payWay,jdbcType=VARCHAR},
      pay_account = #{record.payAccount,jdbcType=VARCHAR},
      pay_date = #{record.payDate,jdbcType=TIMESTAMP},
      booking_type = #{record.bookingType,jdbcType=VARCHAR},
      apply_status = #{record.applyStatus,jdbcType=CHAR},
      remark = #{record.remark,jdbcType=VARCHAR},
      del_flag = #{record.delFlag,jdbcType=CHAR},
      create_user = #{record.createUser,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_user = #{record.updateUser,jdbcType=INTEGER},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.BizPayPlanPayLog">
    update biz_pay_plan_pay_log
    <set>
      <if test="payPlanId != null">
        pay_plan_id = #{payPlanId,jdbcType=BIGINT},
      </if>
      <if test="contractId != null">
        contract_id = #{contractId,jdbcType=VARCHAR},
      </if>
      <if test="contractNo != null">
        contract_no = #{contractNo,jdbcType=VARCHAR},
      </if>
      <if test="applyAmount != null">
        apply_amount = #{applyAmount,jdbcType=DECIMAL},
      </if>
      <if test="payWay != null">
        pay_way = #{payWay,jdbcType=VARCHAR},
      </if>
      <if test="payAccount != null">
        pay_account = #{payAccount,jdbcType=VARCHAR},
      </if>
      <if test="payDate != null">
        pay_date = #{payDate,jdbcType=TIMESTAMP},
      </if>
      <if test="bookingType != null">
        booking_type = #{bookingType,jdbcType=VARCHAR},
      </if>
      <if test="applyStatus != null">
        apply_status = #{applyStatus,jdbcType=CHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null">
        del_flag = #{delFlag,jdbcType=CHAR},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        update_user = #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.BizPayPlanPayLog">
    update biz_pay_plan_pay_log
    set pay_plan_id = #{payPlanId,jdbcType=BIGINT},
      contract_id = #{contractId,jdbcType=VARCHAR},
      contract_no = #{contractNo,jdbcType=VARCHAR},
      apply_amount = #{applyAmount,jdbcType=DECIMAL},
      pay_way = #{payWay,jdbcType=VARCHAR},
      pay_account = #{payAccount,jdbcType=VARCHAR},
      pay_date = #{payDate,jdbcType=TIMESTAMP},
      booking_type = #{bookingType,jdbcType=VARCHAR},
      apply_status = #{applyStatus,jdbcType=CHAR},
      remark = #{remark,jdbcType=VARCHAR},
      del_flag = #{delFlag,jdbcType=CHAR},
      create_user = #{createUser,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>
