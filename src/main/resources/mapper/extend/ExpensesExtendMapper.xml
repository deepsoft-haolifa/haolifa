<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.deepsoft.haolifa.dao.repository.extend.ExpensesExtendMapper">

    <resultMap id="reportMap" type="com.deepsoft.haolifa.model.domain.ExpensesReport">
        <result column="total_amount" property="totalAmount" jdbcType="DECIMAL"
                javaType="java.math.BigDecimal"></result>
        <result column="second_classify" property="secondClassify" jdbcType="VARCHAR"
                javaType="java.lang.String"></result>
        <result column="expenses_classify" property="expensesClassify" jdbcType="VARCHAR"
                javaType="java.lang.String"></result>
        <result column="create_time" property="createTime" jdbcType="VARCHAR" javaType="java.lang.String"></result>
        <result column="department" property="department" jdbcType="VARCHAR" javaType="java.lang.String"></result>
    </resultMap>
    <select id="getClassify" resultMap="reportMap" parameterType="java.lang.String">
        select sum(total_amount)                                      total_amount,
               second_classify,
               FROM_UNIXTIME(UNIX_TIMESTAMP(create_time), "%Y-%m") as create_time,
               expenses_classify,
               department
        from expenses
        where is_delete = 0
          and expenses_classify = #{expensesClassify,jdbcType=VARCHAR}
        group by expenses_classify, FROM_UNIXTIME(UNIX_TIMESTAMP(create_time), "%Y-%m")
    </select>
    <select id="classifyByDepartment" resultMap="reportMap" parameterType="java.lang.Integer">
        select sum(total_amount)                                      total_amount,
               second_classify,
               FROM_UNIXTIME(UNIX_TIMESTAMP(create_time), "%Y-%m") as create_time,
               expenses_classify,
               department
        from expenses is_delete=0
        group by expenses_classify, department
    </select>
    <select id="classifyBySecondDepartment" resultMap="reportMap" parameterType="java.lang.Integer">
        select sum(total_amount)                                      total_amount,
               second_classify,
               FROM_UNIXTIME(UNIX_TIMESTAMP(create_time), "%Y-%m") as create_time,
               expenses_classify,
               department
        from expenses is_delete=0
        group by second_classify, FROM_UNIXTIME(UNIX_TIMESTAMP(create_time), "%Y-%m")
    </select>
    <select id="getAllClassify" resultType="com.deepsoft.haolifa.model.domain.ExpensesReport">
        select  ifnull(sum(total_amount),0) total_amount,second_classify,expenses_classify,department from expenses
        <include refid="commonCondition"></include>
        group by expenses_classify
    </select>
    <select id="classifyByDepartmentAll" resultType="com.deepsoft.haolifa.model.domain.ExpensesReport"
            parameterType="com.deepsoft.haolifa.model.dto.report.ReportBaseDTO">
        select ifnull(sum(total_amount),0) total_amount,second_classify,expenses_classify,department from expenses
        <include refid="commonCondition"></include>
        group by department
    </select>
    <select id="getAllClassifyWithDepartment" resultType="com.deepsoft.haolifa.model.domain.ExpensesReport">
        select ifnull(sum(total_amount),0) total_amount,second_classify,expenses_classify,department from expenses
        <include refid="commonCondition"></include>
        group by expenses_classify
    </select>


    <select id="getAllClassifyWithFirstClassify" resultMap="reportMap" parameterType="java.lang.String">
        select sum(total_amount)                                      total_amount,
               second_classify,
               FROM_UNIXTIME(UNIX_TIMESTAMP(create_time), "%Y-%m") as create_time,
               expenses_classify,
               department
        from expenses
        where is_delete = 0
          and expenses_classify = #{classify,jdbcType=VARCHAR}
        group by second_classify
    </select>

    <select id="getMonthByDepartment" resultMap="reportMap" parameterType="java.lang.String">
        select sum(total_amount)                                      total_amount,
               second_classify,
               FROM_UNIXTIME(UNIX_TIMESTAMP(create_time), "%Y-%m") as create_time,
               expenses_classify,
               department
        from expenses
        where is_delete = 0
          and department = #{department,jdbcType=VARCHAR}
        group by FROM_UNIXTIME(UNIX_TIMESTAMP(create_time), "%Y-%m")
    </select>
    <select id="expenseTotalByMonth" resultType="com.deepsoft.haolifa.model.domain.ExpensesReport">
        select ifnull(sum(total_amount),0) totalAmount,date_str,data_month,data_year from expenses where is_delete=0
        <if test="year!=null and year!=''">
            and data_year=#{year}
        </if>
        group by data_month
    </select>
    <select id="listSummary" resultType="java.lang.String">
        select ifnull(sum(total_amount),0) totalAmount from expenses
        <include refid="commonCondition"></include>
        <include refid="expenseCondition"></include>
    </select>


    <sql id="commonCondition">
        <where>
            is_delete=0
            <if test="startDate!=null and startDate!=''">
                and date_str>=#{startDate}
            </if>
            <if test="endDate!=null and endDate!=''">
                and date_str&lt;=#{endDate}
            </if>
            <if test="year!=null and year!=''">
                and data_year=#{year}
            </if>
            <if test="month!=null and month!=''">
                and data_month=#{month}
            </if>
        </where>
    </sql>
    <sql id="expenseCondition">
        <if test="department!=null and department!=''">
            and department like concat('%',#{department},'%')
        </if>
        <if test="commitUser != null">
            and commit_user like concat('%',#{commitUser},'%')
        </if>
        <if test="classifyName != null">
            and expenses_classify like concat('%',#{classifyName},'%')
        </if>
        <if test="secondClassifyName != null">
            and second_classify like concat('%',#{secondClassifyName},'%')
        </if>
        <if test="voucherNo != null">
            and voucher_no like concat('%',#{voucherNo},'%')
        </if>
    </sql>

</mapper>
