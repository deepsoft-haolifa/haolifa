<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.deepsoft.haolifa.dao.repository.SaleReportMapper">
    <resultMap id="reportMap" type="com.deepsoft.haolifa.model.domain.SaleReport">
        <result column="total_num" property="totalNum" jdbcType="INTEGER" javaType="java.lang.Integer"></result>
        <result column="product_no" property="productNo" jdbcType="VARCHAR" javaType="java.lang.String"></result>
        <result column="product_model" property="productModel" jdbcType="VARCHAR" javaType="java.lang.String"></result>
        <result column="total_price" property="totalPrice" jdbcType="DOUBLE" javaType="java.lang.Double"></result>
    </resultMap>
    <resultMap id="contractMap" type="com.deepsoft.haolifa.model.dto.export.ExportContractDTO">
        <result column="year" property="year" jdbcType="INTEGER" javaType="java.lang.Integer"></result>
        <result column="demand_name" property="demandName" jdbcType="VARCHAR" javaType="java.lang.String"></result>
        <result column="total_price" property="totalPrice" jdbcType="DOUBLE" javaType="java.lang.Double"></result>
    </resultMap>


    <select id="selectByMonth" resultType="java.lang.String">
        select ifnull(sum((e.quantity * op.price)), 0)
        from entry_out_store_record e
                 left join order_product_associate op on e.order_no = op.order_no and e.product_no = op.product_no
        where e.type = 1
          and e.operation_type = 2
          and e.create_time BETWEEN #{startTime} and #{endTime}
    </select>
    <select id="selectByModel" resultMap="reportMap" parameterType="java.lang.String">
        select sum(inspect.total_num)
        total_num,inspect.product_no,inspect.product_model,sum(inspect.total_num*associate.price) total_price from
        (select
        sum(pro_inspect_record.`qualified_number`)
        total_num,pro_inspect_record.product_no,pro_inspect_record.product_model,pro_inspect_record.order_no
        from pro_inspect_record where product_no !=''
        <if test="year!=null and year != ''">
            and FROM_UNIXTIME(UNIX_TIMESTAMP(create_time),"%Y") = #{year}
        </if>
        group by pro_inspect_record.product_no,pro_inspect_record.order_no) as inspect,
        (select order_product_associate.`product_no`,order_product_associate.`price`,order_product_associate.`order_no`
        from order_product_associate
        group by order_product_associate.`product_no`,order_product_associate.`order_no`
        order by order_no) as associate
        where inspect.product_no = associate.product_no and inspect.order_no = associate.order_no group by
        inspect.product_model
    </select>

    <select id="selectAllContract" resultMap="reportMap">
        select sum(order_product_associate.product_number)
        total_num,order_product_associate.product_no,order_product_associate.product_model,sum(order_product_associate.product_number*order_product_associate.price)
        total_price
        from order_product_associate where 1=1
        <if test="year!=null and year != ''">
            and FROM_UNIXTIME(UNIX_TIMESTAMP(create_time),"%Y") = #{year}
        </if>
    </select>

    <select id="selectByMonthContract" resultMap="reportMap" parameterType="java.lang.String">
        select sum(order_product_associate.product_number)                                 total_num,
               order_product_associate.product_no,
               order_product_associate.product_model,
               sum(order_product_associate.product_number * order_product_associate.price) total_price
        from order_product_associate
        where order_product_associate.create_time BETWEEN #{startTime} and #{endTime}
    </select>
    <select id="selectByModelContract" resultMap="reportMap" parameterType="java.lang.String">
        select sum(order_product_associate.product_number)                                 total_num,
               order_product_associate.product_no,
               order_product_associate.product_model,
               sum(order_product_associate.product_number * order_product_associate.price) total_price
        from order_product_associate
        GROUP BY order_product_associate.product_model
    </select>


    <select id="selectContractByDemandName" resultType="com.deepsoft.haolifa.model.dto.export.ExportContractDTO">
        select ifnull(sum(`total_price`),0) total_price,demand_name
        from order_product
        <where>
            <if test="startDate!=null and startDate != ''">
                and create_time&gt;=#{startDate}
            </if>
            <if test="endDate!=null and endDate != ''">
                and create_time&lt;=#{endDate}
            </if>
        </where>
        group by demand_name
    </select>
    <select id="selectshouhuiContractByDemandName" resultType="com.deepsoft.haolifa.model.dto.export.ExportContractDTO">
        SELECT
        ifnull(sum( pm.amount ),0) total_price,
        demand_name,
        FROM_UNIXTIME( UNIX_TIMESTAMP( pm.create_time ), "%Y" ) year
        FROM
        order_product op
        LEFT JOIN biz_bill_contract pm ON pm.order_no = op.order_no
        <include refid="saleCollectionSql"/>
        group by op.demand_name
    </select>

    <select id="selectSaleCollectionList" resultType="com.deepsoft.haolifa.model.dto.export.PaymentRespDTO">
        SELECT
        op.order_no,
        op.order_status,
        op.create_time,
        op.demand_name,
        op.delivery_date,
        ifnull(op.total_price,0),
        op.deliver_status,
        ifnull(pm.amount,0) collectionAmount,
        pm.create_time collectionDate,
        ifnull(op.total_price,0) - ifnull(pm.amount,0) owedAmount
        FROM
        order_product op
        LEFT JOIN biz_bill_contract pm ON pm.order_no = op.order_no
        <include refid="saleCollectionSql"/>
    </select>

    <select id="reportCollectOrderSummary" resultType="com.deepsoft.haolifa.model.dto.export.TotalAmountDTO">
        SELECT
        ifnull(sum(op.total_price),0) totalSaleAmount,
        ifnull(sum(bbc.amount),0) totalCollectAmount,
        ifnull(sum(op.total_price),0) - ifnull(sum(bbc.amount),0) totalOwedAmount
        FROM
        order_product op
        LEFT JOIN biz_bill_contract bbc ON bbc.order_no = op.order_no
        <include refid="collectSql"/>
    </select>
    <sql id="saleCollectionSql">
        <where>
            <if test="startDate!=null and startDate != ''">
                and pm.create_time&gt;=#{startDate}
            </if>
            <if test="endDate!=null and endDate != ''">
                and pm.create_time&lt;=#{endDate}
            </if>
            <if test="orderNo != null and orderNo != ''">
                and op.order_no like CONCAT('%',#{orderNo},'%')
            </if>
            <if test="orderStatus != null and orderStatus > 0">
                and op.order_status = #{orderStatus}
            </if>
            <if test="deliverStatus != null and deliverStatus > -1">
                and op.deliver_status = #{deliverStatus}
            </if>
            <if test="demandName != null and demandName != ''">
                and op.demand_name like CONCAT('%',#{demandName},'%')
            </if>
        </where>
    </sql>


    <select id="selectInvoiceAmountByDemandName" resultType="com.deepsoft.haolifa.model.dto.export.ExportContractDTO">
        select ifnull(sum(`total_amount`),0) total_price,
        invoice_company as demand_name
        from invoice iv
        <include refid="invoiceSql"></include>
        group by iv.invoice_company
    </select>

    <select id="selectDeliveryAmountByDemandName" resultType="com.deepsoft.haolifa.model.dto.export.ExportContractDTO">
        SELECT o.demand_name, ifnull(SUM(c.price), 0) total_price
        FROM order_product o
        INNER JOIN (
        SELECT order_no, price
        FROM entry_out_store_record e
        WHERE ( e.type = 1
        AND e.operation_type = 1
        AND e.price > 0
        <if test="year!=null and year != ''">
            and FROM_UNIXTIME(UNIX_TIMESTAMP(create_time),"%Y") = #{year}
        </if>
        <if test="startDate!=null and startDate != ''">
            and create_time&gt;=#{startDate}
        </if>
        <if test="endDate!=null and endDate != ''">
            and create_time&lt;=#{endDate}
        </if>
        )
        ) c
        ON c.order_no = o.order_no
        WHERE o.demand_name != ''
        GROUP BY o.demand_name
    </select>
    <select id="reportSaleByDemandList" resultType="com.deepsoft.haolifa.model.dto.export.DemandSaleAmountRespDTO">
        SELECT
        op.order_no,
        op.demand_name,
        ifnull( sum( op.total_price ), 0 ) saleAmount,
        ifnull( sum( pm.amount ), 0 ) collectAmount,
        ifnull( sum( iv.total_amount ), 0 ) invoiceAmount,
        ifnull( sum( e.price ), 0 ) deliveryAmount,
        ifnull( sum( e.price ), 0 ) - ifnull( sum( iv.total_amount ), 0 ) oweTicketAmount,
        ifnull( sum( e.price ), 0 ) - ifnull( sum( pm.amount ), 0 ) oweMoneyAmount
        FROM
        order_product op
        LEFT JOIN ( SELECT order_no, sum( total_amount ) total_amount FROM invoice WHERE type = 1 AND STATUS IN ( 2 )
        GROUP BY order_no ) iv ON iv.order_no = op.order_no
        LEFT JOIN ( SELECT order_no, sum( amount ) amount FROM payment_management GROUP BY order_no ) pm ON pm.order_no
        = op.order_no
        LEFT JOIN ( SELECT order_no, sum( price*abs(quantity) ) price FROM entry_out_store_record WHERE type = 1 AND
        operation_type =
        1 AND price > 0 GROUP BY order_no ) e ON e.order_no = op.order_no
        <include refid="saleByDemandSql"></include>
        GROUP BY op.order_no,op.demand_name
    </select>
    <select id="reportSaleByDemandSummary" resultType="com.deepsoft.haolifa.model.dto.export.DemandSaleAmountRespDTO">
        SELECT
        sum( tmp.saleAmount ) saleAmount,
        sum( tmp.collectAmount ) collectAmount,
        sum( tmp.invoiceAmount ) invoiceAmount,
        sum( tmp.deliveryAmount ) deliveryAmount,
        sum( tmp.oweTicketAmount ) oweTicketAmount,
        sum( tmp.oweMoneyAmount ) oweMoneyAmount
        FROM
        (
        SELECT
        ifnull( sum( op.total_price ), 0 ) saleAmount,
        ifnull( sum( pm.amount ), 0 ) collectAmount,
        ifnull( sum( iv.total_amount ), 0 ) invoiceAmount,
        ifnull( sum( e.price ), 0 ) deliveryAmount,
        ifnull( sum( e.price ), 0 ) - ifnull( sum( iv.total_amount ), 0 ) oweTicketAmount,
        ifnull( sum( e.price ), 0 ) - ifnull( sum( pm.amount ), 0 ) oweMoneyAmount
        FROM
        order_product op
        LEFT JOIN ( SELECT order_no, sum( total_amount ) total_amount FROM invoice WHERE type = 1 AND STATUS IN ( 2 )
        GROUP BY order_no ) iv ON iv.order_no = op.order_no
        LEFT JOIN ( SELECT order_no, sum( amount ) amount FROM biz_bill_contract GROUP BY order_no ) pm ON pm.order_no
        = op.order_no
        LEFT JOIN ( SELECT order_no, sum( price *abs(quantity)) price FROM entry_out_store_record WHERE type = 1 AND
        operation_type =
        1 AND price > 0 GROUP BY order_no ) e ON e.order_no = op.order_no
        <include refid="saleByDemandSql"/>
        GROUP BY
        op.order_no
        ) tmp
    </select>
    <sql id="saleByDemandSql">
        <where>
            <if test="startDate!=null and startDate != ''">
                and op.create_time&gt;=#{startDate}
            </if>
            <if test="endDate!=null and endDate != ''">
                and op.create_time&lt;=#{endDate}
            </if>
            <if test="orderNo != null and orderNo != ''">
                and op.order_no like CONCAT('%',#{orderNo},'%')
            </if>
            <if test="demandName != null and demandName != ''">
                and op.demand_name like CONCAT('%',#{demandName},'%')
            </if>
        </where>
    </sql>
    <select id="reportOutputList" resultType="com.deepsoft.haolifa.model.dto.export.SaleOutputRespDTO">
        SELECT
        op.order_no,
        op.order_status,
        op.create_time,
        op.demand_name,
        -- opa.product_name,
        e.price,
        e.product_no,
        e.product_specifications,
        e.product_model,
        e.quantity,
        e.quantity * e.price totalPrice
        FROM
        entry_out_store_record e
        -- LEFT JOIN order_product_associate opa ON e.order_no = opa.order_no AND e.product_no = opa.product_no
        LEFT JOIN order_product op ON e.order_no = op.order_no
        <include refid="saleByOutputSql"></include>
        ORDER BY e.id DESC
    </select>

    <select id="selectOutputSummary" resultType="com.deepsoft.haolifa.model.dto.export.SaleAllRespDTO">
        SELECT
        ifnull(sum((e.quantity * e.price)), 0) outPutTotalAmount,
        sum(e.quantity) outPutTotalNum
        FROM entry_out_store_record e
        <include refid="saleByOutputSql"></include>
    </select>

    <select id="selectSaleSummary" resultType="com.deepsoft.haolifa.model.dto.export.SaleAllRespDTO">
        SELECT
        ifnull( sum( op.total_price ), 0 ) saleTotalAmount,
        sum(op.total_count) saleTotalNum
        FROM order_product op
        <include refid="saleBySaleSql"></include>
    </select>

    <select id="selectInvoiceSummary" resultType="java.math.BigDecimal">
        SELECT
        ifnull(sum( total_amount ),0) total_amount
        FROM invoice iv
        <include refid="invoiceSql"></include>
    </select>

    <select id="selectCollectSummary" resultType="java.math.BigDecimal">
        SELECT
        ifnull(sum(bbc.amount),0) totalCollectAmount
        FROM biz_bill_contract bbc
        LEFT JOIN order_product op ON bbc.order_no = op.order_no
        <include refid="collectSql"></include>
    </select>

    <select id="selectDeliverySummary" resultType="java.math.BigDecimal">
        SELECT
        ifnull(sum((abs(e.quantity) * e.price)), 0) deliveryAmount
        FROM entry_out_store_record e
        <include refid="saleByDeliverySql"></include>
    </select>


    <sql id="saleByOutputSql">
        <where>
            e.type = 1 and e.operation_type = 2
            <if test="startDate!=null and startDate != ''">
                and e.create_time&gt;=#{startDate}
            </if>
            <if test="endDate!=null and endDate != ''">
                and e.create_time&lt;=#{endDate}
            </if>
            <if test="orderNo != null and orderNo != ''">
                and op.order_no like CONCAT('%',#{orderNo},'%')
            </if>
            <if test="demandName != null and demandName != ''">
                and op.demand_name like CONCAT('%',#{demandName},'%')
            </if>
            <!--            <if test="productName != null and productName != ''">-->
            <!--                and opa.product_name like CONCAT('%',#{productName},'%')-->
            <!--            </if>-->
        </where>
    </sql>
    <sql id="saleByDeliverySql">
        <where>
            e.type = 1 and e.operation_type = 1
            <if test="startDate!=null and startDate != ''">
                and e.create_time&gt;=#{startDate}
            </if>
            <if test="endDate!=null and endDate != ''">
                and e.create_time&lt;=#{endDate}
            </if>
        </where>
    </sql>
    <sql id="saleBySaleSql">
        <where>
            <if test="startDate!=null and startDate != ''">
                and op.create_time&gt;=#{startDate}
            </if>
            <if test="endDate!=null and endDate != ''">
                and op.create_time&lt;=#{endDate}
            </if>
        </where>
    </sql>
    <sql id="invoiceSql">
        <where>
            iv.type=1 and iv.status in(2)
            <if test="startDate!=null and startDate != ''">
                and iv.invoice_date&gt;=#{startDate}
            </if>
            <if test="endDate!=null and endDate != ''">
                and iv.invoice_date&lt;=#{endDate}
            </if>
            <if test="orderNo != null and orderNo != ''">
                and iv.order_no like CONCAT('%',#{orderNo},'%')
            </if>
            <if test="demandName != null and demandName != ''">
                and iv.invoice_company like CONCAT('%',#{demandName},'%')
            </if>
        </where>
    </sql>
    <sql id="collectSql">
        <where>
            <if test="startDate!=null and startDate != ''">
                and bbc.create_time&gt;=#{startDate}
            </if>
            <if test="endDate!=null and endDate != ''">
                and bbc.create_time&lt;=#{endDate}
            </if>
            <if test="orderNo != null and orderNo != ''">
                and op.order_no like CONCAT('%',#{orderNo},'%')
            </if>
            <if test="demandName != null and demandName != ''">
                and op.demand_name like CONCAT('%',#{demandName},'%')
            </if>
        </where>
    </sql>
</mapper>
