<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.deepsoft.haolifa.dao.repository.PayProductionCapacityMapper">
    <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.PayProductionCapacity">
        <constructor>
            <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="user_name" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="capacity_code" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="team_id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="depart_id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="depart_name" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="create_user" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="update_user" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
            <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
        </constructor>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id
        , user_id, user_name, capacity_code, team_id, depart_id, depart_name, create_user,
    update_user, create_time, update_time
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap"
            parameterType="com.deepsoft.haolifa.model.domain.PayProductionCapacityExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from pay_production_capacity
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from pay_production_capacity
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from pay_production_capacity
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.PayProductionCapacityExample">
        delete from pay_production_capacity
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.PayProductionCapacity">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into pay_production_capacity (user_id, user_name, capacity_code,
        team_id, depart_id, depart_name,
        create_user, update_user, create_time,
        update_time)
        values (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{capacityCode,jdbcType=VARCHAR},
        #{teamId,jdbcType=INTEGER}, #{departId,jdbcType=INTEGER}, #{departName,jdbcType=VARCHAR},
        #{createUser,jdbcType=VARCHAR}, #{updateUser,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},
        #{updateTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.PayProductionCapacity">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into pay_production_capacity
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                user_id,
            </if>
            <if test="userName != null">
                user_name,
            </if>
            <if test="capacityCode != null">
                capacity_code,
            </if>
            <if test="teamId != null">
                team_id,
            </if>
            <if test="departId != null">
                depart_id,
            </if>
            <if test="departName != null">
                depart_name,
            </if>
            <if test="createUser != null">
                create_user,
            </if>
            <if test="updateUser != null">
                update_user,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="capacityCode != null">
                #{capacityCode,jdbcType=VARCHAR},
            </if>
            <if test="teamId != null">
                #{teamId,jdbcType=INTEGER},
            </if>
            <if test="departId != null">
                #{departId,jdbcType=INTEGER},
            </if>
            <if test="departName != null">
                #{departName,jdbcType=VARCHAR},
            </if>
            <if test="createUser != null">
                #{createUser,jdbcType=VARCHAR},
            </if>
            <if test="updateUser != null">
                #{updateUser,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.PayProductionCapacityExample"
            resultType="java.lang.Integer">
        select count(*) from pay_production_capacity
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update pay_production_capacity
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=INTEGER},
            </if>
            <if test="record.userName != null">
                user_name = #{record.userName,jdbcType=VARCHAR},
            </if>
            <if test="record.capacityCode != null">
                capacity_code = #{record.capacityCode,jdbcType=VARCHAR},
            </if>
            <if test="record.teamId != null">
                team_id = #{record.teamId,jdbcType=INTEGER},
            </if>
            <if test="record.departId != null">
                depart_id = #{record.departId,jdbcType=INTEGER},
            </if>
            <if test="record.departName != null">
                depart_name = #{record.departName,jdbcType=VARCHAR},
            </if>
            <if test="record.createUser != null">
                create_user = #{record.createUser,jdbcType=VARCHAR},
            </if>
            <if test="record.updateUser != null">
                update_user = #{record.updateUser,jdbcType=VARCHAR},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update pay_production_capacity
        set id = #{record.id,jdbcType=INTEGER},
        user_id = #{record.userId,jdbcType=INTEGER},
        user_name = #{record.userName,jdbcType=VARCHAR},
        capacity_code = #{record.capacityCode,jdbcType=VARCHAR},
        team_id = #{record.teamId,jdbcType=INTEGER},
        depart_id = #{record.departId,jdbcType=INTEGER},
        depart_name = #{record.departName,jdbcType=VARCHAR},
        create_user = #{record.createUser,jdbcType=VARCHAR},
        update_user = #{record.updateUser,jdbcType=VARCHAR},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.PayProductionCapacity">
        update pay_production_capacity
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="userName != null">
                user_name = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="capacityCode != null">
                capacity_code = #{capacityCode,jdbcType=VARCHAR},
            </if>
            <if test="teamId != null">
                team_id = #{teamId,jdbcType=INTEGER},
            </if>
            <if test="departId != null">
                depart_id = #{departId,jdbcType=INTEGER},
            </if>
            <if test="departName != null">
                depart_name = #{departName,jdbcType=VARCHAR},
            </if>
            <if test="createUser != null">
                create_user = #{createUser,jdbcType=VARCHAR},
            </if>
            <if test="updateUser != null">
                update_user = #{updateUser,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.PayProductionCapacity">
        update pay_production_capacity
        set user_id       = #{userId,jdbcType=INTEGER},
            user_name     = #{userName,jdbcType=VARCHAR},
            capacity_code = #{capacityCode,jdbcType=VARCHAR},
            team_id       = #{teamId,jdbcType=INTEGER},
            depart_id     = #{departId,jdbcType=INTEGER},
            depart_name   = #{departName,jdbcType=VARCHAR},
            create_user   = #{createUser,jdbcType=VARCHAR},
            update_user   = #{updateUser,jdbcType=VARCHAR},
            create_time   = #{createTime,jdbcType=TIMESTAMP},
            update_time   = #{updateTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="getListByUserIdList" resultMap="BaseResultMap" parameterType="java.util.List">
        select *
        from pay_production_capacity
        where user_id in
        <foreach collection="list" item="userIdList" open="(" close=")" separator=",">
            #{userIdList}
        </foreach>
    </select>
</mapper>
