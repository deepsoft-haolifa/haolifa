<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.deepsoft.haolifa.dao.repository.BizPayApplyDetailMapper" >
  <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.BizPayApplyDetail" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="pay_apply_id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="price" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="purchase_order_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="purchase_order_no" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="pay_type" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="apply_pay_company" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="apply_collection_company" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="remark" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="del_flag" jdbcType="CHAR" javaType="java.lang.String" />
      <arg column="create_user" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_user" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, pay_apply_id, price, purchase_order_id, purchase_order_no, pay_type, apply_pay_company, 
    apply_collection_company, remark, del_flag, create_user, create_time, update_user, 
    update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.deepsoft.haolifa.model.domain.BizPayApplyDetailExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from biz_pay_apply_detail
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from biz_pay_apply_detail
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from biz_pay_apply_detail
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.BizPayApplyDetailExample" >
    delete from biz_pay_apply_detail
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.BizPayApplyDetail" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into biz_pay_apply_detail (pay_apply_id, price, purchase_order_id, 
      purchase_order_no, pay_type, apply_pay_company, 
      apply_collection_company, remark, del_flag, 
      create_user, create_time, update_user, 
      update_time)
    values (#{payApplyId,jdbcType=BIGINT}, #{price,jdbcType=DECIMAL}, #{purchaseOrderId,jdbcType=INTEGER}, 
      #{purchaseOrderNo,jdbcType=VARCHAR}, #{payType,jdbcType=VARCHAR}, #{applyPayCompany,jdbcType=VARCHAR}, 
      #{applyCollectionCompany,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}, #{delFlag,jdbcType=CHAR}, 
      #{createUser,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateUser,jdbcType=INTEGER}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.BizPayApplyDetail" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into biz_pay_apply_detail
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="payApplyId != null" >
        pay_apply_id,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="purchaseOrderId != null" >
        purchase_order_id,
      </if>
      <if test="purchaseOrderNo != null" >
        purchase_order_no,
      </if>
      <if test="payType != null" >
        pay_type,
      </if>
      <if test="applyPayCompany != null" >
        apply_pay_company,
      </if>
      <if test="applyCollectionCompany != null" >
        apply_collection_company,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="delFlag != null" >
        del_flag,
      </if>
      <if test="createUser != null" >
        create_user,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateUser != null" >
        update_user,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="payApplyId != null" >
        #{payApplyId,jdbcType=BIGINT},
      </if>
      <if test="price != null" >
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="purchaseOrderId != null" >
        #{purchaseOrderId,jdbcType=INTEGER},
      </if>
      <if test="purchaseOrderNo != null" >
        #{purchaseOrderNo,jdbcType=VARCHAR},
      </if>
      <if test="payType != null" >
        #{payType,jdbcType=VARCHAR},
      </if>
      <if test="applyPayCompany != null" >
        #{applyPayCompany,jdbcType=VARCHAR},
      </if>
      <if test="applyCollectionCompany != null" >
        #{applyCollectionCompany,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null" >
        #{delFlag,jdbcType=CHAR},
      </if>
      <if test="createUser != null" >
        #{createUser,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.BizPayApplyDetailExample" resultType="java.lang.Integer" >
    select count(*) from biz_pay_apply_detail
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update biz_pay_apply_detail
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.payApplyId != null" >
        pay_apply_id = #{record.payApplyId,jdbcType=BIGINT},
      </if>
      <if test="record.price != null" >
        price = #{record.price,jdbcType=DECIMAL},
      </if>
      <if test="record.purchaseOrderId != null" >
        purchase_order_id = #{record.purchaseOrderId,jdbcType=INTEGER},
      </if>
      <if test="record.purchaseOrderNo != null" >
        purchase_order_no = #{record.purchaseOrderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.payType != null" >
        pay_type = #{record.payType,jdbcType=VARCHAR},
      </if>
      <if test="record.applyPayCompany != null" >
        apply_pay_company = #{record.applyPayCompany,jdbcType=VARCHAR},
      </if>
      <if test="record.applyCollectionCompany != null" >
        apply_collection_company = #{record.applyCollectionCompany,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.delFlag != null" >
        del_flag = #{record.delFlag,jdbcType=CHAR},
      </if>
      <if test="record.createUser != null" >
        create_user = #{record.createUser,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateUser != null" >
        update_user = #{record.updateUser,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update biz_pay_apply_detail
    set id = #{record.id,jdbcType=INTEGER},
      pay_apply_id = #{record.payApplyId,jdbcType=BIGINT},
      price = #{record.price,jdbcType=DECIMAL},
      purchase_order_id = #{record.purchaseOrderId,jdbcType=INTEGER},
      purchase_order_no = #{record.purchaseOrderNo,jdbcType=VARCHAR},
      pay_type = #{record.payType,jdbcType=VARCHAR},
      apply_pay_company = #{record.applyPayCompany,jdbcType=VARCHAR},
      apply_collection_company = #{record.applyCollectionCompany,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=VARCHAR},
      del_flag = #{record.delFlag,jdbcType=CHAR},
      create_user = #{record.createUser,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_user = #{record.updateUser,jdbcType=INTEGER},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.BizPayApplyDetail" >
    update biz_pay_apply_detail
    <set >
      <if test="payApplyId != null" >
        pay_apply_id = #{payApplyId,jdbcType=BIGINT},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="purchaseOrderId != null" >
        purchase_order_id = #{purchaseOrderId,jdbcType=INTEGER},
      </if>
      <if test="purchaseOrderNo != null" >
        purchase_order_no = #{purchaseOrderNo,jdbcType=VARCHAR},
      </if>
      <if test="payType != null" >
        pay_type = #{payType,jdbcType=VARCHAR},
      </if>
      <if test="applyPayCompany != null" >
        apply_pay_company = #{applyPayCompany,jdbcType=VARCHAR},
      </if>
      <if test="applyCollectionCompany != null" >
        apply_collection_company = #{applyCollectionCompany,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null" >
        del_flag = #{delFlag,jdbcType=CHAR},
      </if>
      <if test="createUser != null" >
        create_user = #{createUser,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.BizPayApplyDetail" >
    update biz_pay_apply_detail
    set pay_apply_id = #{payApplyId,jdbcType=BIGINT},
      price = #{price,jdbcType=DECIMAL},
      purchase_order_id = #{purchaseOrderId,jdbcType=INTEGER},
      purchase_order_no = #{purchaseOrderNo,jdbcType=VARCHAR},
      pay_type = #{payType,jdbcType=VARCHAR},
      apply_pay_company = #{applyPayCompany,jdbcType=VARCHAR},
      apply_collection_company = #{applyCollectionCompany,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      del_flag = #{delFlag,jdbcType=CHAR},
      create_user = #{createUser,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>