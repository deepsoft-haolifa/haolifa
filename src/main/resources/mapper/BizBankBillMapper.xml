<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.deepsoft.haolifa.dao.repository.BizBankBillMapper">
  <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.BizBankBill">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="company" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="account" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="serial_no" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="operate_date" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="certificate_number" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="pay_way" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="pay_account" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="pay_company" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="pay_company_id" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="collect_company" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="pre_month_money" javaType="java.math.BigDecimal" jdbcType="DECIMAL" />
      <arg column="collection_money" javaType="java.math.BigDecimal" jdbcType="DECIMAL" />
      <arg column="collection_type" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="payment" javaType="java.math.BigDecimal" jdbcType="DECIMAL" />
      <arg column="payment_type" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="balance" javaType="java.math.BigDecimal" jdbcType="DECIMAL" />
      <arg column="type" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="dept_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="remark" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="project_code" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="subject" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="del_flag" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="contract_status" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="contract_user" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="create_user" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_user" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, company, account, serial_no, operate_date, certificate_number, pay_way, pay_account,
    pay_company, pay_company_id, collect_company, pre_month_money, collection_money,
    collection_type, payment, payment_type, balance, type, dept_id, remark, project_code,
    subject, del_flag, contract_status, contract_user, create_user, create_time, update_user,
    update_time
  </sql>
  <select id="selectByExample" parameterType="com.deepsoft.haolifa.model.domain.BizBankBillExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from biz_bank_bill
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from biz_bank_bill
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from biz_bank_bill
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.BizBankBillExample">
    delete from biz_bank_bill
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.BizBankBill">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into biz_bank_bill (company, account, serial_no,
      operate_date, certificate_number, pay_way,
      pay_account, pay_company, pay_company_id,
      collect_company, pre_month_money, collection_money,
      collection_type, payment, payment_type,
      balance, type, dept_id,
      remark, project_code, subject,
      del_flag, contract_status, contract_user,
      create_user, create_time, update_user,
      update_time)
    values (#{company,jdbcType=VARCHAR}, #{account,jdbcType=VARCHAR}, #{serialNo,jdbcType=VARCHAR},
      #{operateDate,jdbcType=TIMESTAMP}, #{certificateNumber,jdbcType=VARCHAR}, #{payWay,jdbcType=VARCHAR},
      #{payAccount,jdbcType=VARCHAR}, #{payCompany,jdbcType=VARCHAR}, #{payCompanyId,jdbcType=VARCHAR},
      #{collectCompany,jdbcType=VARCHAR}, #{preMonthMoney,jdbcType=DECIMAL}, #{collectionMoney,jdbcType=DECIMAL},
      #{collectionType,jdbcType=VARCHAR}, #{payment,jdbcType=DECIMAL}, #{paymentType,jdbcType=VARCHAR},
      #{balance,jdbcType=DECIMAL}, #{type,jdbcType=VARCHAR}, #{deptId,jdbcType=INTEGER},
      #{remark,jdbcType=VARCHAR}, #{projectCode,jdbcType=VARCHAR}, #{subject,jdbcType=INTEGER},
      #{delFlag,jdbcType=CHAR}, #{contractStatus,jdbcType=VARCHAR}, #{contractUser,jdbcType=INTEGER},
      #{createUser,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateUser,jdbcType=INTEGER},
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.BizBankBill">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into biz_bank_bill
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="company != null">
        company,
      </if>
      <if test="account != null">
        account,
      </if>
      <if test="serialNo != null">
        serial_no,
      </if>
      <if test="operateDate != null">
        operate_date,
      </if>
      <if test="certificateNumber != null">
        certificate_number,
      </if>
      <if test="payWay != null">
        pay_way,
      </if>
      <if test="payAccount != null">
        pay_account,
      </if>
      <if test="payCompany != null">
        pay_company,
      </if>
      <if test="payCompanyId != null">
        pay_company_id,
      </if>
      <if test="collectCompany != null">
        collect_company,
      </if>
      <if test="preMonthMoney != null">
        pre_month_money,
      </if>
      <if test="collectionMoney != null">
        collection_money,
      </if>
      <if test="collectionType != null">
        collection_type,
      </if>
      <if test="payment != null">
        payment,
      </if>
      <if test="paymentType != null">
        payment_type,
      </if>
      <if test="balance != null">
        balance,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="deptId != null">
        dept_id,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="projectCode != null">
        project_code,
      </if>
      <if test="subject != null">
        subject,
      </if>
      <if test="delFlag != null">
        del_flag,
      </if>
      <if test="contractStatus != null">
        contract_status,
      </if>
      <if test="contractUser != null">
        contract_user,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="company != null">
        #{company,jdbcType=VARCHAR},
      </if>
      <if test="account != null">
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="serialNo != null">
        #{serialNo,jdbcType=VARCHAR},
      </if>
      <if test="operateDate != null">
        #{operateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="certificateNumber != null">
        #{certificateNumber,jdbcType=VARCHAR},
      </if>
      <if test="payWay != null">
        #{payWay,jdbcType=VARCHAR},
      </if>
      <if test="payAccount != null">
        #{payAccount,jdbcType=VARCHAR},
      </if>
      <if test="payCompany != null">
        #{payCompany,jdbcType=VARCHAR},
      </if>
      <if test="payCompanyId != null">
        #{payCompanyId,jdbcType=VARCHAR},
      </if>
      <if test="collectCompany != null">
        #{collectCompany,jdbcType=VARCHAR},
      </if>
      <if test="preMonthMoney != null">
        #{preMonthMoney,jdbcType=DECIMAL},
      </if>
      <if test="collectionMoney != null">
        #{collectionMoney,jdbcType=DECIMAL},
      </if>
      <if test="collectionType != null">
        #{collectionType,jdbcType=VARCHAR},
      </if>
      <if test="payment != null">
        #{payment,jdbcType=DECIMAL},
      </if>
      <if test="paymentType != null">
        #{paymentType,jdbcType=VARCHAR},
      </if>
      <if test="balance != null">
        #{balance,jdbcType=DECIMAL},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="projectCode != null">
        #{projectCode,jdbcType=VARCHAR},
      </if>
      <if test="subject != null">
        #{subject,jdbcType=INTEGER},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=CHAR},
      </if>
      <if test="contractStatus != null">
        #{contractStatus,jdbcType=VARCHAR},
      </if>
      <if test="contractUser != null">
        #{contractUser,jdbcType=INTEGER},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.BizBankBillExample" resultType="java.lang.Integer">
    select count(*) from biz_bank_bill
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update biz_bank_bill
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.company != null">
        company = #{record.company,jdbcType=VARCHAR},
      </if>
      <if test="record.account != null">
        account = #{record.account,jdbcType=VARCHAR},
      </if>
      <if test="record.serialNo != null">
        serial_no = #{record.serialNo,jdbcType=VARCHAR},
      </if>
      <if test="record.operateDate != null">
        operate_date = #{record.operateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.certificateNumber != null">
        certificate_number = #{record.certificateNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.payWay != null">
        pay_way = #{record.payWay,jdbcType=VARCHAR},
      </if>
      <if test="record.payAccount != null">
        pay_account = #{record.payAccount,jdbcType=VARCHAR},
      </if>
      <if test="record.payCompany != null">
        pay_company = #{record.payCompany,jdbcType=VARCHAR},
      </if>
      <if test="record.payCompanyId != null">
        pay_company_id = #{record.payCompanyId,jdbcType=VARCHAR},
      </if>
      <if test="record.collectCompany != null">
        collect_company = #{record.collectCompany,jdbcType=VARCHAR},
      </if>
      <if test="record.preMonthMoney != null">
        pre_month_money = #{record.preMonthMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.collectionMoney != null">
        collection_money = #{record.collectionMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.collectionType != null">
        collection_type = #{record.collectionType,jdbcType=VARCHAR},
      </if>
      <if test="record.payment != null">
        payment = #{record.payment,jdbcType=DECIMAL},
      </if>
      <if test="record.paymentType != null">
        payment_type = #{record.paymentType,jdbcType=VARCHAR},
      </if>
      <if test="record.balance != null">
        balance = #{record.balance,jdbcType=DECIMAL},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.deptId != null">
        dept_id = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.projectCode != null">
        project_code = #{record.projectCode,jdbcType=VARCHAR},
      </if>
      <if test="record.subject != null">
        subject = #{record.subject,jdbcType=INTEGER},
      </if>
      <if test="record.delFlag != null">
        del_flag = #{record.delFlag,jdbcType=CHAR},
      </if>
      <if test="record.contractStatus != null">
        contract_status = #{record.contractStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.contractUser != null">
        contract_user = #{record.contractUser,jdbcType=INTEGER},
      </if>
      <if test="record.createUser != null">
        create_user = #{record.createUser,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateUser != null">
        update_user = #{record.updateUser,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update biz_bank_bill
    set id = #{record.id,jdbcType=INTEGER},
      company = #{record.company,jdbcType=VARCHAR},
      account = #{record.account,jdbcType=VARCHAR},
      serial_no = #{record.serialNo,jdbcType=VARCHAR},
      operate_date = #{record.operateDate,jdbcType=TIMESTAMP},
      certificate_number = #{record.certificateNumber,jdbcType=VARCHAR},
      pay_way = #{record.payWay,jdbcType=VARCHAR},
      pay_account = #{record.payAccount,jdbcType=VARCHAR},
      pay_company = #{record.payCompany,jdbcType=VARCHAR},
      pay_company_id = #{record.payCompanyId,jdbcType=VARCHAR},
      collect_company = #{record.collectCompany,jdbcType=VARCHAR},
      pre_month_money = #{record.preMonthMoney,jdbcType=DECIMAL},
      collection_money = #{record.collectionMoney,jdbcType=DECIMAL},
      collection_type = #{record.collectionType,jdbcType=VARCHAR},
      payment = #{record.payment,jdbcType=DECIMAL},
      payment_type = #{record.paymentType,jdbcType=VARCHAR},
      balance = #{record.balance,jdbcType=DECIMAL},
      type = #{record.type,jdbcType=VARCHAR},
      dept_id = #{record.deptId,jdbcType=INTEGER},
      remark = #{record.remark,jdbcType=VARCHAR},
      project_code = #{record.projectCode,jdbcType=VARCHAR},
      subject = #{record.subject,jdbcType=INTEGER},
      del_flag = #{record.delFlag,jdbcType=CHAR},
      contract_status = #{record.contractStatus,jdbcType=VARCHAR},
      contract_user = #{record.contractUser,jdbcType=INTEGER},
      create_user = #{record.createUser,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_user = #{record.updateUser,jdbcType=INTEGER},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.BizBankBill">
    update biz_bank_bill
    <set>
      <if test="company != null">
        company = #{company,jdbcType=VARCHAR},
      </if>
      <if test="account != null">
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="serialNo != null">
        serial_no = #{serialNo,jdbcType=VARCHAR},
      </if>
      <if test="operateDate != null">
        operate_date = #{operateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="certificateNumber != null">
        certificate_number = #{certificateNumber,jdbcType=VARCHAR},
      </if>
      <if test="payWay != null">
        pay_way = #{payWay,jdbcType=VARCHAR},
      </if>
      <if test="payAccount != null">
        pay_account = #{payAccount,jdbcType=VARCHAR},
      </if>
      <if test="payCompany != null">
        pay_company = #{payCompany,jdbcType=VARCHAR},
      </if>
      <if test="payCompanyId != null">
        pay_company_id = #{payCompanyId,jdbcType=VARCHAR},
      </if>
      <if test="collectCompany != null">
        collect_company = #{collectCompany,jdbcType=VARCHAR},
      </if>
      <if test="preMonthMoney != null">
        pre_month_money = #{preMonthMoney,jdbcType=DECIMAL},
      </if>
      <if test="collectionMoney != null">
        collection_money = #{collectionMoney,jdbcType=DECIMAL},
      </if>
      <if test="collectionType != null">
        collection_type = #{collectionType,jdbcType=VARCHAR},
      </if>
      <if test="payment != null">
        payment = #{payment,jdbcType=DECIMAL},
      </if>
      <if test="paymentType != null">
        payment_type = #{paymentType,jdbcType=VARCHAR},
      </if>
      <if test="balance != null">
        balance = #{balance,jdbcType=DECIMAL},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null">
        dept_id = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="projectCode != null">
        project_code = #{projectCode,jdbcType=VARCHAR},
      </if>
      <if test="subject != null">
        subject = #{subject,jdbcType=INTEGER},
      </if>
      <if test="delFlag != null">
        del_flag = #{delFlag,jdbcType=CHAR},
      </if>
      <if test="contractStatus != null">
        contract_status = #{contractStatus,jdbcType=VARCHAR},
      </if>
      <if test="contractUser != null">
        contract_user = #{contractUser,jdbcType=INTEGER},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        update_user = #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.BizBankBill">
    update biz_bank_bill
    set company = #{company,jdbcType=VARCHAR},
      account = #{account,jdbcType=VARCHAR},
      serial_no = #{serialNo,jdbcType=VARCHAR},
      operate_date = #{operateDate,jdbcType=TIMESTAMP},
      certificate_number = #{certificateNumber,jdbcType=VARCHAR},
      pay_way = #{payWay,jdbcType=VARCHAR},
      pay_account = #{payAccount,jdbcType=VARCHAR},
      pay_company = #{payCompany,jdbcType=VARCHAR},
      pay_company_id = #{payCompanyId,jdbcType=VARCHAR},
      collect_company = #{collectCompany,jdbcType=VARCHAR},
      pre_month_money = #{preMonthMoney,jdbcType=DECIMAL},
      collection_money = #{collectionMoney,jdbcType=DECIMAL},
      collection_type = #{collectionType,jdbcType=VARCHAR},
      payment = #{payment,jdbcType=DECIMAL},
      payment_type = #{paymentType,jdbcType=VARCHAR},
      balance = #{balance,jdbcType=DECIMAL},
      type = #{type,jdbcType=VARCHAR},
      dept_id = #{deptId,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      project_code = #{projectCode,jdbcType=VARCHAR},
      subject = #{subject,jdbcType=INTEGER},
      del_flag = #{delFlag,jdbcType=CHAR},
      contract_status = #{contractStatus,jdbcType=VARCHAR},
      contract_user = #{contractUser,jdbcType=INTEGER},
      create_user = #{createUser,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <resultMap id="getBillContractListResultMap" type="com.deepsoft.haolifa.model.dto.finance.contract.ContractBillRSDTO">
        <result column="bill_type" javaType="java.lang.String" jdbcType="VARCHAR" property="billType" />
        <result column="id" javaType="java.lang.Integer" jdbcType="INTEGER" property="id" />
        <result column="company" javaType="java.lang.String" jdbcType="VARCHAR" property="company" />
        <result column="account" javaType="java.lang.String" jdbcType="VARCHAR" property="account" />
        <result column="serial_no" javaType="java.lang.String" jdbcType="VARCHAR" property="serialNo" />
        <result column="operate_date" javaType="java.util.Date" jdbcType="TIMESTAMP" property="operateDate" />
        <result column="certificate_number" javaType="java.lang.String" jdbcType="VARCHAR" property="certificateNumber" />
        <result column="pay_way" javaType="java.lang.String" jdbcType="VARCHAR" property="payWay" />
        <result column="pay_account" javaType="java.lang.String" jdbcType="VARCHAR" property="payAccount" />
        <result column="pay_company" javaType="java.lang.String" jdbcType="VARCHAR" property="payCompany" />
        <result column="pay_company_id" javaType="java.lang.String" jdbcType="VARCHAR" property="payCompanyId" />
        <result column="collect_company" javaType="java.lang.String" jdbcType="VARCHAR" property="collectCompany" />
        <result column="pre_month_money" javaType="java.math.BigDecimal" jdbcType="DECIMAL" property="preMonthMoney" />
        <result column="collection_money" javaType="java.math.BigDecimal" jdbcType="DECIMAL" property="collectionMoney" />
        <result column="collection_type" javaType="java.lang.String" jdbcType="VARCHAR" property="collectionType" />
        <result column="payment" javaType="java.math.BigDecimal" jdbcType="DECIMAL" property="payment" />
        <result column="payment_type" javaType="java.lang.String" jdbcType="VARCHAR" property="paymentType" />
        <result column="balance" javaType="java.math.BigDecimal" jdbcType="DECIMAL" property="balance" />
        <result column="type" javaType="java.lang.String" jdbcType="VARCHAR" property="type" />
        <result column="dept_id" javaType="java.lang.Integer" jdbcType="INTEGER" property="deptId" />
        <result column="remark" javaType="java.lang.String" jdbcType="VARCHAR" property="remark" />
        <result column="contract_status" javaType="java.lang.String" jdbcType="VARCHAR" property="contractStatus" />
        <result column="contract_user" javaType="java.lang.Integer" jdbcType="INTEGER" property="contractUser" />
        <result column="create_user" javaType="java.lang.Integer" jdbcType="INTEGER" property="createUser" />
        <result column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" property="createTime" />
        <result column="update_user" javaType="java.lang.Integer" jdbcType="INTEGER" property="updateUser" />
        <result column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" property="updateTime" />
    </resultMap>

    <sql id="biz_bill_contract_sql_01">
        ifnull ((select  sum(amount)   from biz_bill_contract bbc where bbc.bill_id = bb.id and bbc.bill_type = '2' and bbc.audit_status = 1),0)
    </sql>


    <sql id="biz_bill_contract_sql_02">
        ifnull ((select  sum(amount)   from biz_bill_contract bbc where bbc.bill_id = ob.id and bbc.bill_type = '3' and bbc.audit_status = 1),0)
    </sql>


    <sql id="bank_id">
        select
        '2' as billType,
        bb.id as id,
        bb.company as company,
        bb.account as account,
        bb.serial_no as serialNo,
        bb.operate_date as operateDate,
        bb.certificate_number as certificateNumber,
        bb.pay_way as payWay,
        bb.pay_account as payAccount,
        bb.pay_company as payCompany,
        bb.collect_company as collectCompany,
        bb.collection_Money as collectionMoney,
        bb.collection_Type as collectionType,
        bb.payment as payment,
        bb.pre_month_money as preMonthMoney,
        bb.balance as balance,
        bb.payment_type as paymentType,
        bb.type as type,
        bb.dept_Id as deptId,
        ( SELECT dept_name FROM sys_department WHERE id = bb.dept_Id ) deptName,
        bb.remark as remark,
        bb.contract_status as contractStatus,
        (case when bb.contract_status = '0' then '未完成' else '完成' end) as contractStatusCN,
        <include refid="biz_bill_contract_sql_01"></include> as decomposeAmount ,
        bb.collection_Money - <include refid="biz_bill_contract_sql_01"></include> as surplusAmount
        from biz_bank_bill bb
        where 1=1
        and bb.del_flag = 0
        and bb.type = 1
        and bb.collection_type = 2
        and (bb.collection_Money - <include refid="biz_bill_contract_sql_01"></include>) > 0
    </sql>

    <sql id="other_id">
        select
        '3' as billType,
        ob.id as id,
        ob.company as company,
        ob.account as account,
        ob.serial_no as serialNo,
        ob.operate_date as operateDate,
        ob.certificate_number as certificateNumber,
        ob.pay_way as payWay,
        ob.pay_account as payAccount,
        ob.pay_company as payCompany,
        ob.collect_company as collectCompany,
        ob.collection_Money as collectionMoney,
        ob.collection_Type as collectionType,
        ob.payment as payment,
        ob.pre_month_money as preMonthMoney,
        ob.balance as balance,
        ob.payment_type as paymentType,
        ob.type as type,
        ob.dept_Id as deptId,
        ( SELECT dept_name FROM sys_department WHERE id = ob.dept_Id ) deptName,
        ob.remark as remark,
        ob.contract_status as contractStatus,
        (case when ob.contract_status = '0' then '未完成' else '完成' end) as contractStatusCN,
        <include refid="biz_bill_contract_sql_02"></include> as decomposeAmount ,
        ob.collection_Money - <include refid="biz_bill_contract_sql_02"></include> as surplusAmount
        from biz_other_bill ob
        where 1=1
        and ob.del_flag = 0
        and ob.type = 1
        and ob.collection_type = 2
        and (ob.collection_Money - <include refid="biz_bill_contract_sql_02"></include>) > 0
    </sql>


    <select id="getBillContractList" parameterType="com.deepsoft.haolifa.model.dto.finance.contract.ContractBillRQDTO"
        resultType="com.deepsoft.haolifa.model.dto.finance.contract.ContractBillRSDTO">
        select al.* from (
        <include refid="bank_id"></include>
        UNION all
        <include refid="other_id"></include>
        ) al
        <where>
            <if test="billType != null and billType != 0 ">
                and al.billType = #{billType}
            </if>

            <if test="operateDateStart != null and operateDateStart != '' ">
                and al.operateDate &gt;= #{operateDateStart}
            </if>

            <if test="operateDateEnd != null and operateDateEnd != '' ">
                and al.operateDate &lt;=  #{operateDateEnd}
            </if>

            <if test="certificateNumber != null and certificateNumber != '' ">
                and al.certificateNumber like CONCAT('%',#{certificateNumber},'%')
            </if>

            <if test="payAccount != null and payAccount != '' ">
                and al.payAccount like CONCAT('%',#{payAccount},'%')
            </if>

            <if test="collectCompany != null and collectCompany != '' ">
                and al.collectCompany like CONCAT('%',#{collectCompany},'%')
            </if>
            <if test="payCompany != null and payCompany != '' ">
                and al.payCompany like CONCAT('%',#{payCompany},'%')
            </if>
            <if test="paymentType != null and paymentType != '' ">
                and al.paymentType = #{paymentType}
            </if>
        </where>
        order by al.operateDate desc
    </select>

    <select id="getBillContractById" resultMap="getBillContractListResultMap">
        select al.*
        from (
                 select '2' as bill_type, bb.*
                 from biz_bank_bill bb
                 UNION all
                 select '3' as bill_type, ob.*
                 from biz_other_bill ob
             ) al
        where   al.bill_type = #{billType}
        and     al.id = #{id}
    </select>

    <select id="getLastRecord" resultType="com.deepsoft.haolifa.model.domain.BizBankBill">
        select * from biz_bank_bill
        <where>
            <if test="companyQuery != null and companyQuery != ''">
                and company = #{companyQuery}
            </if>
            <if test="accountQuery != null and accountQuery != ''">
                and account = #{accountQuery}
            </if>
            and del_flag = 0
        </where>
        order by id desc limit 1
    </select>

    <select id="getLastRecordList" resultType="com.deepsoft.haolifa.model.domain.BizBankBill">
        select * from biz_bank_bill
        <where>
           and  account in
            <foreach close=")" collection="list" item="account" open="(" separator=",">
                #{account}
            </foreach>
            and del_flag = 0
        </where>
        group by account
        order by id desc limit 1
    </select>
</mapper>
