<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.deepsoft.haolifa.dao.repository.InspectMapper" >
  <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.Inspect" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="inspect_no" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="purchase_no" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="batch_number" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="status" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="create_user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="arrival_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="supplier_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="supplier_no" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="blueprints" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="qualified_number" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="total_count" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="unqualified_number" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, inspect_no, purchase_no, batch_number, status, create_time, update_time, create_user_id, 
    arrival_time, supplier_name, supplier_no, blueprints, qualified_number, total_count, 
    unqualified_number
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.deepsoft.haolifa.model.domain.InspectExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from inspect
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from inspect
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from inspect
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.InspectExample" >
    delete from inspect
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.Inspect" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into inspect (inspect_no, purchase_no, batch_number, 
      status, create_time, update_time, 
      create_user_id, arrival_time, supplier_name, 
      supplier_no, blueprints, qualified_number, 
      total_count, unqualified_number)
    values (#{inspectNo,jdbcType=VARCHAR}, #{purchaseNo,jdbcType=VARCHAR}, #{batchNumber,jdbcType=VARCHAR}, 
      #{status,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{createUserId,jdbcType=INTEGER}, #{arrivalTime,jdbcType=TIMESTAMP}, #{supplierName,jdbcType=VARCHAR}, 
      #{supplierNo,jdbcType=VARCHAR}, #{blueprints,jdbcType=VARCHAR}, #{qualifiedNumber,jdbcType=INTEGER}, 
      #{totalCount,jdbcType=INTEGER}, #{unqualifiedNumber,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.Inspect" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into inspect
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="inspectNo != null" >
        inspect_no,
      </if>
      <if test="purchaseNo != null" >
        purchase_no,
      </if>
      <if test="batchNumber != null" >
        batch_number,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="createUserId != null" >
        create_user_id,
      </if>
      <if test="arrivalTime != null" >
        arrival_time,
      </if>
      <if test="supplierName != null" >
        supplier_name,
      </if>
      <if test="supplierNo != null" >
        supplier_no,
      </if>
      <if test="blueprints != null" >
        blueprints,
      </if>
      <if test="qualifiedNumber != null" >
        qualified_number,
      </if>
      <if test="totalCount != null" >
        total_count,
      </if>
      <if test="unqualifiedNumber != null" >
        unqualified_number,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="inspectNo != null" >
        #{inspectNo,jdbcType=VARCHAR},
      </if>
      <if test="purchaseNo != null" >
        #{purchaseNo,jdbcType=VARCHAR},
      </if>
      <if test="batchNumber != null" >
        #{batchNumber,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null" >
        #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="arrivalTime != null" >
        #{arrivalTime,jdbcType=TIMESTAMP},
      </if>
      <if test="supplierName != null" >
        #{supplierName,jdbcType=VARCHAR},
      </if>
      <if test="supplierNo != null" >
        #{supplierNo,jdbcType=VARCHAR},
      </if>
      <if test="blueprints != null" >
        #{blueprints,jdbcType=VARCHAR},
      </if>
      <if test="qualifiedNumber != null" >
        #{qualifiedNumber,jdbcType=INTEGER},
      </if>
      <if test="totalCount != null" >
        #{totalCount,jdbcType=INTEGER},
      </if>
      <if test="unqualifiedNumber != null" >
        #{unqualifiedNumber,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.InspectExample" resultType="java.lang.Integer" >
    select count(*) from inspect
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update inspect
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.inspectNo != null" >
        inspect_no = #{record.inspectNo,jdbcType=VARCHAR},
      </if>
      <if test="record.purchaseNo != null" >
        purchase_no = #{record.purchaseNo,jdbcType=VARCHAR},
      </if>
      <if test="record.batchNumber != null" >
        batch_number = #{record.batchNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUserId != null" >
        create_user_id = #{record.createUserId,jdbcType=INTEGER},
      </if>
      <if test="record.arrivalTime != null" >
        arrival_time = #{record.arrivalTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.supplierName != null" >
        supplier_name = #{record.supplierName,jdbcType=VARCHAR},
      </if>
      <if test="record.supplierNo != null" >
        supplier_no = #{record.supplierNo,jdbcType=VARCHAR},
      </if>
      <if test="record.blueprints != null" >
        blueprints = #{record.blueprints,jdbcType=VARCHAR},
      </if>
      <if test="record.qualifiedNumber != null" >
        qualified_number = #{record.qualifiedNumber,jdbcType=INTEGER},
      </if>
      <if test="record.totalCount != null" >
        total_count = #{record.totalCount,jdbcType=INTEGER},
      </if>
      <if test="record.unqualifiedNumber != null" >
        unqualified_number = #{record.unqualifiedNumber,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update inspect
    set id = #{record.id,jdbcType=INTEGER},
      inspect_no = #{record.inspectNo,jdbcType=VARCHAR},
      purchase_no = #{record.purchaseNo,jdbcType=VARCHAR},
      batch_number = #{record.batchNumber,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=TINYINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_user_id = #{record.createUserId,jdbcType=INTEGER},
      arrival_time = #{record.arrivalTime,jdbcType=TIMESTAMP},
      supplier_name = #{record.supplierName,jdbcType=VARCHAR},
      supplier_no = #{record.supplierNo,jdbcType=VARCHAR},
      blueprints = #{record.blueprints,jdbcType=VARCHAR},
      qualified_number = #{record.qualifiedNumber,jdbcType=INTEGER},
      total_count = #{record.totalCount,jdbcType=INTEGER},
      unqualified_number = #{record.unqualifiedNumber,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.Inspect" >
    update inspect
    <set >
      <if test="inspectNo != null" >
        inspect_no = #{inspectNo,jdbcType=VARCHAR},
      </if>
      <if test="purchaseNo != null" >
        purchase_no = #{purchaseNo,jdbcType=VARCHAR},
      </if>
      <if test="batchNumber != null" >
        batch_number = #{batchNumber,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null" >
        create_user_id = #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="arrivalTime != null" >
        arrival_time = #{arrivalTime,jdbcType=TIMESTAMP},
      </if>
      <if test="supplierName != null" >
        supplier_name = #{supplierName,jdbcType=VARCHAR},
      </if>
      <if test="supplierNo != null" >
        supplier_no = #{supplierNo,jdbcType=VARCHAR},
      </if>
      <if test="blueprints != null" >
        blueprints = #{blueprints,jdbcType=VARCHAR},
      </if>
      <if test="qualifiedNumber != null" >
        qualified_number = #{qualifiedNumber,jdbcType=INTEGER},
      </if>
      <if test="totalCount != null" >
        total_count = #{totalCount,jdbcType=INTEGER},
      </if>
      <if test="unqualifiedNumber != null" >
        unqualified_number = #{unqualifiedNumber,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.Inspect" >
    update inspect
    set inspect_no = #{inspectNo,jdbcType=VARCHAR},
      purchase_no = #{purchaseNo,jdbcType=VARCHAR},
      batch_number = #{batchNumber,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_user_id = #{createUserId,jdbcType=INTEGER},
      arrival_time = #{arrivalTime,jdbcType=TIMESTAMP},
      supplier_name = #{supplierName,jdbcType=VARCHAR},
      supplier_no = #{supplierNo,jdbcType=VARCHAR},
      blueprints = #{blueprints,jdbcType=VARCHAR},
      qualified_number = #{qualifiedNumber,jdbcType=INTEGER},
      total_count = #{totalCount,jdbcType=INTEGER},
      unqualified_number = #{unqualifiedNumber,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>