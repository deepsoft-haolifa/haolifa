<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.deepsoft.haolifa.dao.repository.InspectMapper">
  <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.Inspect">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="order_no" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="type" javaType="java.lang.Byte" jdbcType="TINYINT" />
      <arg column="status" javaType="java.lang.Byte" jdbcType="TINYINT" />
      <arg column="inspect_no" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="material_graph_no" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="product_model" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="number" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="create_user_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, order_no, type, status, inspect_no, material_graph_no, product_model, number, 
    create_time, update_time, create_user_id
  </sql>
  <select id="selectByExample" parameterType="com.deepsoft.haolifa.model.domain.InspectExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from inspect
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from inspect
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from inspect
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.InspectExample">
    delete from inspect
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.Inspect">
    insert into inspect (id, order_no, type, 
      status, inspect_no, material_graph_no, 
      product_model, number, create_time, 
      update_time, create_user_id)
    values (#{id,jdbcType=INTEGER}, #{orderNo,jdbcType=VARCHAR}, #{type,jdbcType=TINYINT}, 
      #{status,jdbcType=TINYINT}, #{inspectNo,jdbcType=VARCHAR}, #{materialGraphNo,jdbcType=VARCHAR}, 
      #{productModel,jdbcType=VARCHAR}, #{number,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{createUserId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.Inspect">
    insert into inspect
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="orderNo != null">
        order_no,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="inspectNo != null">
        inspect_no,
      </if>
      <if test="materialGraphNo != null">
        material_graph_no,
      </if>
      <if test="productModel != null">
        product_model,
      </if>
      <if test="number != null">
        number,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="createUserId != null">
        create_user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderNo != null">
        #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=TINYINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="inspectNo != null">
        #{inspectNo,jdbcType=VARCHAR},
      </if>
      <if test="materialGraphNo != null">
        #{materialGraphNo,jdbcType=VARCHAR},
      </if>
      <if test="productModel != null">
        #{productModel,jdbcType=VARCHAR},
      </if>
      <if test="number != null">
        #{number,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.InspectExample" resultType="java.lang.Long">
    select count(*) from inspect
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update inspect
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderNo != null">
        order_no = #{record.orderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=TINYINT},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.inspectNo != null">
        inspect_no = #{record.inspectNo,jdbcType=VARCHAR},
      </if>
      <if test="record.materialGraphNo != null">
        material_graph_no = #{record.materialGraphNo,jdbcType=VARCHAR},
      </if>
      <if test="record.productModel != null">
        product_model = #{record.productModel,jdbcType=VARCHAR},
      </if>
      <if test="record.number != null">
        number = #{record.number,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUserId != null">
        create_user_id = #{record.createUserId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update inspect
    set id = #{record.id,jdbcType=INTEGER},
      order_no = #{record.orderNo,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=TINYINT},
      status = #{record.status,jdbcType=TINYINT},
      inspect_no = #{record.inspectNo,jdbcType=VARCHAR},
      material_graph_no = #{record.materialGraphNo,jdbcType=VARCHAR},
      product_model = #{record.productModel,jdbcType=VARCHAR},
      number = #{record.number,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_user_id = #{record.createUserId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.Inspect">
    update inspect
    <set>
      <if test="orderNo != null">
        order_no = #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="inspectNo != null">
        inspect_no = #{inspectNo,jdbcType=VARCHAR},
      </if>
      <if test="materialGraphNo != null">
        material_graph_no = #{materialGraphNo,jdbcType=VARCHAR},
      </if>
      <if test="productModel != null">
        product_model = #{productModel,jdbcType=VARCHAR},
      </if>
      <if test="number != null">
        number = #{number,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        create_user_id = #{createUserId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.Inspect">
    update inspect
    set order_no = #{orderNo,jdbcType=VARCHAR},
      type = #{type,jdbcType=TINYINT},
      status = #{status,jdbcType=TINYINT},
      inspect_no = #{inspectNo,jdbcType=VARCHAR},
      material_graph_no = #{materialGraphNo,jdbcType=VARCHAR},
      product_model = #{productModel,jdbcType=VARCHAR},
      number = #{number,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_user_id = #{createUserId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <insert id="batchInsertInspect" parameterType="List">
    <foreach collection="list" item="item" separator=";">
      insert into inspect
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <if test="item.id != null">
          id,
        </if>
        <if test="item.orderNo != null">
          order_no,
        </if>
        <if test="item.type != null">
          type,
        </if>
        <if test="item.status != null">
          status,
        </if>
        <if test="item.inspectNo != null">
          inspect_no,
        </if>
        <if test="item.materialGraphNo != null">
          material_graph_no,
        </if>
        <if test="item.productModel != null">
          product_model,
        </if>
        <if test="item.number != null">
          number,
        </if>
        <if test="item.createTime != null">
          create_time,
        </if>
        <if test="item.updateTime != null">
          update_time,
        </if>
        <if test="item.createUserId != null">
          create_user_id,
        </if>
      </trim>
      <trim prefix="values (" suffix=")" suffixOverrides=",">
        <if test="item.id != null">
          #{item.id,jdbcType=INTEGER},
        </if>
        <if test="item.orderNo != null">
          #{item.orderNo,jdbcType=VARCHAR},
        </if>
        <if test="item.type != null">
          #{item.type,jdbcType=TINYINT},
        </if>
        <if test="item.status != null">
          #{item.status,jdbcType=TINYINT},
        </if>
        <if test="item.inspectNo != null">
          #{item.inspectNo,jdbcType=VARCHAR},
        </if>
        <if test="item.materialGraphNo != null">
          #{item.materialGraphNo,jdbcType=VARCHAR},
        </if>
        <if test="item.productModel != null">
          #{item.productModel,jdbcType=VARCHAR},
        </if>
        <if test="item.number != null">
          #{item.number,jdbcType=INTEGER},
        </if>
        <if test="item.createTime != null">
          #{item.createTime,jdbcType=TIMESTAMP},
        </if>
        <if test="item.updateTime != null">
          #{item.updateTime,jdbcType=TIMESTAMP},
        </if>
        <if test="item.createUserId != null">
          #{item.createUserId,jdbcType=INTEGER},
        </if>
      </trim>
    </foreach>
  </insert>

  <select id="selectInspectDistinctList" parameterType="com.deepsoft.haolifa.model.dto.InspectDTO" resultType="Map">
    select distinct
    order_no orderNo,
    `type`,
    `status`,
    inspect_no inspectNo,
    create_time createTime,
    update_time updateTime,
    create_user_id createUserId
    from
    inspect
    where
    is_delete = 0
    <if test="type != null and type != ''">
      and `type` = #{type}
    </if>
    <if test="status != null and status != ''" >
      and `status` = #{status}
    </if>
    <if test="inspectNo != null">
      and inspect_no like concat('%',#{inspectNo},'%')
    </if>
    <if test="orderNo != null">
      and order_no like concat('%',#{orderNo},'%')
    </if>
    order by update_time desc
  </select>
</mapper>