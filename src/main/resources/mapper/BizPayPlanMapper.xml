<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.deepsoft.haolifa.dao.repository.BizPayPlanMapper">
    <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.BizPayPlan">
        <constructor>
            <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="pay_data_id" javaType="java.lang.Long" jdbcType="BIGINT"/>
            <arg column="apply_no" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="apply_date" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
            <arg column="contract_id" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="contract_no" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="contract_pay_way" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="apply_pay_company" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="apply_collection_company" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="apply_amount" javaType="java.math.BigDecimal" jdbcType="DECIMAL"/>
            <arg column="pay_company" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="pay_account" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="pay_way" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="payment_type" javaType="java.lang.String" jdbcType="CHAR"/>
            <arg column="status" javaType="java.lang.String" jdbcType="CHAR"/>
            <arg column="pay_date" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
            <arg column="booking_type" javaType="java.lang.String" jdbcType="CHAR"/>
            <arg column="data_status" javaType="java.lang.String" jdbcType="CHAR"/>
            <arg column="remark" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="del_flag" javaType="java.lang.String" jdbcType="CHAR"/>
            <arg column="create_user" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
            <arg column="update_user" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        </constructor>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id
        , pay_data_id, apply_no, apply_date, contract_id, contract_no, contract_pay_way,
    apply_pay_company, apply_collection_company, apply_amount, pay_company, pay_account,
    pay_way, payment_type, status, pay_date, booking_type, data_status, remark, del_flag,
    create_user, create_time, update_user, update_time
    </sql>
    <select id="selectByExample" parameterType="com.deepsoft.haolifa.model.domain.BizPayPlanExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from biz_pay_plan
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from biz_pay_plan
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from biz_pay_plan
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.BizPayPlanExample">
        delete from biz_pay_plan
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.BizPayPlan">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into biz_pay_plan (pay_data_id, apply_no, apply_date,
        contract_id, contract_no, contract_pay_way,
        apply_pay_company, apply_collection_company,
        apply_amount,apply_status, pay_company, pay_account,
        pay_way, payment_type, status,
        pay_date, booking_type, data_status,
        remark, del_flag, create_user,
        create_time, update_user, update_time
        )
        values (#{payDataId,jdbcType=BIGINT}, #{applyNo,jdbcType=VARCHAR}, #{applyDate,jdbcType=TIMESTAMP},
        #{contractId,jdbcType=VARCHAR}, #{contractNo,jdbcType=VARCHAR}, #{contractPayWay,jdbcType=VARCHAR},
        #{applyPayCompany,jdbcType=VARCHAR}, #{applyCollectionCompany,jdbcType=VARCHAR},
        #{applyAmount,jdbcType=DECIMAL},#{applyStatus,jdbcType=VARCHAR}, #{payCompany,jdbcType=VARCHAR},
        #{payAccount,jdbcType=VARCHAR},
        #{payWay,jdbcType=VARCHAR}, #{paymentType,jdbcType=CHAR}, #{status,jdbcType=CHAR},
        #{payDate,jdbcType=TIMESTAMP}, #{bookingType,jdbcType=CHAR}, #{dataStatus,jdbcType=CHAR},
        #{remark,jdbcType=VARCHAR}, #{delFlag,jdbcType=CHAR}, #{createUser,jdbcType=INTEGER},
        #{createTime,jdbcType=TIMESTAMP}, #{updateUser,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.BizPayPlan">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into biz_pay_plan
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="payDataId != null">
                pay_data_id,
            </if>
            <if test="applyNo != null">
                apply_no,
            </if>
            <if test="applyDate != null">
                apply_date,
            </if>
            <if test="contractId != null">
                contract_id,
            </if>
            <if test="contractNo != null">
                contract_no,
            </if>
            <if test="contractPayWay != null">
                contract_pay_way,
            </if>
            <if test="applyPayCompany != null">
                apply_pay_company,
            </if>
            <if test="applyCollectionCompany != null">
                apply_collection_company,
            </if>
            <if test="applyAmount != null">
                apply_amount,
            </if>
            <if test="payCompany != null">
                pay_company,
            </if>
            <if test="payAccount != null">
                pay_account,
            </if>
            <if test="payWay != null">
                pay_way,
            </if>
            <if test="paymentType != null">
                payment_type,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="payDate != null">
                pay_date,
            </if>
            <if test="bookingType != null">
                booking_type,
            </if>
            <if test="dataStatus != null">
                data_status,
            </if>
            <if test="remark != null">
                remark,
            </if>
            <if test="delFlag != null">
                del_flag,
            </if>
            <if test="createUser != null">
                create_user,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateUser != null">
                update_user,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="payDataId != null">
                #{payDataId,jdbcType=BIGINT},
            </if>
            <if test="applyNo != null">
                #{applyNo,jdbcType=VARCHAR},
            </if>
            <if test="applyDate != null">
                #{applyDate,jdbcType=TIMESTAMP},
            </if>
            <if test="contractId != null">
                #{contractId,jdbcType=VARCHAR},
            </if>
            <if test="contractNo != null">
                #{contractNo,jdbcType=VARCHAR},
            </if>
            <if test="contractPayWay != null">
                #{contractPayWay,jdbcType=VARCHAR},
            </if>
            <if test="applyPayCompany != null">
                #{applyPayCompany,jdbcType=VARCHAR},
            </if>
            <if test="applyCollectionCompany != null">
                #{applyCollectionCompany,jdbcType=VARCHAR},
            </if>
            <if test="applyAmount != null">
                #{applyAmount,jdbcType=DECIMAL},
            </if>
            <if test="payCompany != null">
                #{payCompany,jdbcType=VARCHAR},
            </if>
            <if test="payAccount != null">
                #{payAccount,jdbcType=VARCHAR},
            </if>
            <if test="payWay != null">
                #{payWay,jdbcType=VARCHAR},
            </if>
            <if test="paymentType != null">
                #{paymentType,jdbcType=CHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=CHAR},
            </if>
            <if test="payDate != null">
                #{payDate,jdbcType=TIMESTAMP},
            </if>
            <if test="bookingType != null">
                #{bookingType,jdbcType=CHAR},
            </if>
            <if test="dataStatus != null">
                #{dataStatus,jdbcType=CHAR},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="delFlag != null">
                #{delFlag,jdbcType=CHAR},
            </if>
            <if test="createUser != null">
                #{createUser,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUser != null">
                #{updateUser,jdbcType=INTEGER},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.BizPayPlanExample"
            resultType="java.lang.Integer">
        select count(*) from biz_pay_plan
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update biz_pay_plan
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.payDataId != null">
                pay_data_id = #{record.payDataId,jdbcType=BIGINT},
            </if>
            <if test="record.applyNo != null">
                apply_no = #{record.applyNo,jdbcType=VARCHAR},
            </if>
            <if test="record.applyDate != null">
                apply_date = #{record.applyDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.contractId != null">
                contract_id = #{record.contractId,jdbcType=VARCHAR},
            </if>
            <if test="record.contractNo != null">
                contract_no = #{record.contractNo,jdbcType=VARCHAR},
            </if>
            <if test="record.contractPayWay != null">
                contract_pay_way = #{record.contractPayWay,jdbcType=VARCHAR},
            </if>
            <if test="record.applyPayCompany != null">
                apply_pay_company = #{record.applyPayCompany,jdbcType=VARCHAR},
            </if>
            <if test="record.applyCollectionCompany != null">
                apply_collection_company = #{record.applyCollectionCompany,jdbcType=VARCHAR},
            </if>
            <if test="record.applyAmount != null">
                apply_amount = #{record.applyAmount,jdbcType=DECIMAL},
            </if>
            <if test="record.payCompany != null">
                pay_company = #{record.payCompany,jdbcType=VARCHAR},
            </if>
            <if test="record.payAccount != null">
                pay_account = #{record.payAccount,jdbcType=VARCHAR},
            </if>
            <if test="record.payWay != null">
                pay_way = #{record.payWay,jdbcType=VARCHAR},
            </if>
            <if test="record.paymentType != null">
                payment_type = #{record.paymentType,jdbcType=CHAR},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=CHAR},
            </if>
            <if test="record.payDate != null">
                pay_date = #{record.payDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.bookingType != null">
                booking_type = #{record.bookingType,jdbcType=CHAR},
            </if>
            <if test="record.dataStatus != null">
                data_status = #{record.dataStatus,jdbcType=CHAR},
            </if>
            <if test="record.remark != null">
                remark = #{record.remark,jdbcType=VARCHAR},
            </if>
            <if test="record.delFlag != null">
                del_flag = #{record.delFlag,jdbcType=CHAR},
            </if>
            <if test="record.createUser != null">
                create_user = #{record.createUser,jdbcType=INTEGER},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateUser != null">
                update_user = #{record.updateUser,jdbcType=INTEGER},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update biz_pay_plan
        set id = #{record.id,jdbcType=INTEGER},
        pay_data_id = #{record.payDataId,jdbcType=BIGINT},
        apply_no = #{record.applyNo,jdbcType=VARCHAR},
        apply_date = #{record.applyDate,jdbcType=TIMESTAMP},
        contract_id = #{record.contractId,jdbcType=VARCHAR},
        contract_no = #{record.contractNo,jdbcType=VARCHAR},
        contract_pay_way = #{record.contractPayWay,jdbcType=VARCHAR},
        apply_pay_company = #{record.applyPayCompany,jdbcType=VARCHAR},
        apply_collection_company = #{record.applyCollectionCompany,jdbcType=VARCHAR},
        apply_amount = #{record.applyAmount,jdbcType=DECIMAL},
        pay_company = #{record.payCompany,jdbcType=VARCHAR},
        pay_account = #{record.payAccount,jdbcType=VARCHAR},
        pay_way = #{record.payWay,jdbcType=VARCHAR},
        payment_type = #{record.paymentType,jdbcType=CHAR},
        status = #{record.status,jdbcType=CHAR},
        pay_date = #{record.payDate,jdbcType=TIMESTAMP},
        booking_type = #{record.bookingType,jdbcType=CHAR},
        data_status = #{record.dataStatus,jdbcType=CHAR},
        remark = #{record.remark,jdbcType=VARCHAR},
        del_flag = #{record.delFlag,jdbcType=CHAR},
        create_user = #{record.createUser,jdbcType=INTEGER},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_user = #{record.updateUser,jdbcType=INTEGER},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.BizPayPlan">
        update biz_pay_plan
        <set>
            <if test="payDataId != null">
                pay_data_id = #{payDataId,jdbcType=BIGINT},
            </if>
            <if test="applyNo != null">
                apply_no = #{applyNo,jdbcType=VARCHAR},
            </if>
            <if test="applyDate != null">
                apply_date = #{applyDate,jdbcType=TIMESTAMP},
            </if>
            <if test="contractId != null">
                contract_id = #{contractId,jdbcType=VARCHAR},
            </if>
            <if test="contractNo != null">
                contract_no = #{contractNo,jdbcType=VARCHAR},
            </if>
            <if test="contractPayWay != null">
                contract_pay_way = #{contractPayWay,jdbcType=VARCHAR},
            </if>
            <if test="applyPayCompany != null">
                apply_pay_company = #{applyPayCompany,jdbcType=VARCHAR},
            </if>
            <if test="applyCollectionCompany != null">
                apply_collection_company = #{applyCollectionCompany,jdbcType=VARCHAR},
            </if>
            <if test="applyStatus != null">
                apply_status = #{applyStatus,jdbcType=VARCHAR},
            </if>
            <if test="applyAmount != null">
                apply_amount = #{applyAmount,jdbcType=DECIMAL},
            </if>
            <if test="payCompany != null">
                pay_company = #{payCompany,jdbcType=VARCHAR},
            </if>
            <if test="payAccount != null">
                pay_account = #{payAccount,jdbcType=VARCHAR},
            </if>
            <if test="payWay != null">
                pay_way = #{payWay,jdbcType=VARCHAR},
            </if>
            <if test="paymentType != null">
                payment_type = #{paymentType,jdbcType=CHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=CHAR},
            </if>
            <if test="payDate != null">
                pay_date = #{payDate,jdbcType=TIMESTAMP},
            </if>
            <if test="bookingType != null">
                booking_type = #{bookingType,jdbcType=CHAR},
            </if>
            <if test="dataStatus != null">
                data_status = #{dataStatus,jdbcType=CHAR},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="delFlag != null">
                del_flag = #{delFlag,jdbcType=CHAR},
            </if>
            <if test="createUser != null">
                create_user = #{createUser,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUser != null">
                update_user = #{updateUser,jdbcType=INTEGER},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.BizPayPlan">
        update biz_pay_plan
        set pay_data_id              = #{payDataId,jdbcType=BIGINT},
            apply_no                 = #{applyNo,jdbcType=VARCHAR},
            apply_date               = #{applyDate,jdbcType=TIMESTAMP},
            contract_id              = #{contractId,jdbcType=VARCHAR},
            contract_no              = #{contractNo,jdbcType=VARCHAR},
            contract_pay_way         = #{contractPayWay,jdbcType=VARCHAR},
            apply_pay_company        = #{applyPayCompany,jdbcType=VARCHAR},
            apply_collection_company = #{applyCollectionCompany,jdbcType=VARCHAR},
            apply_amount             = #{applyAmount,jdbcType=DECIMAL},
            pay_company              = #{payCompany,jdbcType=VARCHAR},
            pay_account              = #{payAccount,jdbcType=VARCHAR},
            pay_way                  = #{payWay,jdbcType=VARCHAR},
            payment_type             = #{paymentType,jdbcType=CHAR},
            status                   = #{status,jdbcType=CHAR},
            pay_date                 = #{payDate,jdbcType=TIMESTAMP},
            booking_type             = #{bookingType,jdbcType=CHAR},
            data_status              = #{dataStatus,jdbcType=CHAR},
            remark                   = #{remark,jdbcType=VARCHAR},
            del_flag                 = #{delFlag,jdbcType=CHAR},
            create_user              = #{createUser,jdbcType=INTEGER},
            create_time              = #{createTime,jdbcType=TIMESTAMP},
            update_user              = #{updateUser,jdbcType=INTEGER},
            update_time              = #{updateTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>



    <resultMap id="selectListGroupByResultMap" type="com.deepsoft.haolifa.model.dto.finance.payplan.BizPayPlanSummaryRSDTO">
        <result column="supplier_name" property="supplierName" jdbcType="VARCHAR" javaType="java.lang.String"/>
        <result column="demander" property="demander" jdbcType="VARCHAR" javaType="java.lang.String"/>
        <result column="total_price" property="totalPrice" jdbcType="DECIMAL" javaType="java.math.BigDecimal"/>
        <result column="arrear_price" property="arrearPrice" jdbcType="DECIMAL" javaType="java.math.BigDecimal"/>
        <result column="paid_account" property="paidAccount" jdbcType="DECIMAL" javaType="java.math.BigDecimal"/>
        <result column="apply_amount" property="applyAmount" jdbcType="DECIMAL" javaType="java.math.BigDecimal"/>
        <result column="entry_price" property="entryPrice" jdbcType="DECIMAL" javaType="java.math.BigDecimal"/>
    </resultMap>
    <select id="selectListGroupBy" parameterType="com.deepsoft.haolifa.model.dto.finance.payplan.BizPayPlanSummaryRQDTO"
            resultMap="selectListGroupByResultMap">
        select
        po.supplier_name,
        po.demander,
        sum(po.total_price) as total_price,
        sum(po.total_price - po.paid_account) as arrear_price,
        sum(po.paid_account) as paid_account,
        sum(pp.apply_amount) as apply_amount
        from purchase_order po
        left join biz_pay_plan pp on po.id = pp.contract_id
        <where>
            <if test="applyCollectionCompany != null and applyCollectionCompany != '' ">
                po.apply_collection_company like concat('%',${query.applyCollectionCompany},'%')
            </if>
            <if test="payCompany != null and payCompany != '' ">
                po.pay_company like concat('%',${query.payCompany},'%')
            </if>
            and pp.del_flag = 0
            and pp.status = 0
        </where>
        GROUP BY po.supplier_name,po.demander
        order by sum(pp.apply_amount) desc
    </select>
</mapper>
