<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.deepsoft.haolifa.dao.repository.ValveSeatEntrustMapper" >
  <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.ValveSeatEntrust" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="entrust_no" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="graph_no" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="specifications" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="model" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="qty" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="qualified_number" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="status" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="inspect_status" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, entrust_no, name, graph_no, specifications, model, qty, qualified_number, status, 
    inspect_status, create_time, update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.deepsoft.haolifa.model.domain.ValveSeatEntrustExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from valve_seat_entrust
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from valve_seat_entrust
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from valve_seat_entrust
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.ValveSeatEntrustExample" >
    delete from valve_seat_entrust
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.ValveSeatEntrust" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into valve_seat_entrust (entrust_no, name, graph_no, 
      specifications, model, qty, 
      qualified_number, status, inspect_status, 
      create_time, update_time)
    values (#{entrustNo,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{graphNo,jdbcType=VARCHAR}, 
      #{specifications,jdbcType=VARCHAR}, #{model,jdbcType=VARCHAR}, #{qty,jdbcType=INTEGER}, 
      #{qualifiedNumber,jdbcType=INTEGER}, #{status,jdbcType=TINYINT}, #{inspectStatus,jdbcType=TINYINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.ValveSeatEntrust" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into valve_seat_entrust
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="entrustNo != null" >
        entrust_no,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="graphNo != null" >
        graph_no,
      </if>
      <if test="specifications != null" >
        specifications,
      </if>
      <if test="model != null" >
        model,
      </if>
      <if test="qty != null" >
        qty,
      </if>
      <if test="qualifiedNumber != null" >
        qualified_number,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="inspectStatus != null" >
        inspect_status,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="entrustNo != null" >
        #{entrustNo,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="graphNo != null" >
        #{graphNo,jdbcType=VARCHAR},
      </if>
      <if test="specifications != null" >
        #{specifications,jdbcType=VARCHAR},
      </if>
      <if test="model != null" >
        #{model,jdbcType=VARCHAR},
      </if>
      <if test="qty != null" >
        #{qty,jdbcType=INTEGER},
      </if>
      <if test="qualifiedNumber != null" >
        #{qualifiedNumber,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="inspectStatus != null" >
        #{inspectStatus,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.ValveSeatEntrustExample" resultType="java.lang.Integer" >
    select count(*) from valve_seat_entrust
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update valve_seat_entrust
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.entrustNo != null" >
        entrust_no = #{record.entrustNo,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.graphNo != null" >
        graph_no = #{record.graphNo,jdbcType=VARCHAR},
      </if>
      <if test="record.specifications != null" >
        specifications = #{record.specifications,jdbcType=VARCHAR},
      </if>
      <if test="record.model != null" >
        model = #{record.model,jdbcType=VARCHAR},
      </if>
      <if test="record.qty != null" >
        qty = #{record.qty,jdbcType=INTEGER},
      </if>
      <if test="record.qualifiedNumber != null" >
        qualified_number = #{record.qualifiedNumber,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.inspectStatus != null" >
        inspect_status = #{record.inspectStatus,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update valve_seat_entrust
    set id = #{record.id,jdbcType=INTEGER},
      entrust_no = #{record.entrustNo,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      graph_no = #{record.graphNo,jdbcType=VARCHAR},
      specifications = #{record.specifications,jdbcType=VARCHAR},
      model = #{record.model,jdbcType=VARCHAR},
      qty = #{record.qty,jdbcType=INTEGER},
      qualified_number = #{record.qualifiedNumber,jdbcType=INTEGER},
      status = #{record.status,jdbcType=TINYINT},
      inspect_status = #{record.inspectStatus,jdbcType=TINYINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.ValveSeatEntrust" >
    update valve_seat_entrust
    <set >
      <if test="entrustNo != null" >
        entrust_no = #{entrustNo,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="graphNo != null" >
        graph_no = #{graphNo,jdbcType=VARCHAR},
      </if>
      <if test="specifications != null" >
        specifications = #{specifications,jdbcType=VARCHAR},
      </if>
      <if test="model != null" >
        model = #{model,jdbcType=VARCHAR},
      </if>
      <if test="qty != null" >
        qty = #{qty,jdbcType=INTEGER},
      </if>
      <if test="qualifiedNumber != null" >
        qualified_number = #{qualifiedNumber,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="inspectStatus != null" >
        inspect_status = #{inspectStatus,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.ValveSeatEntrust" >
    update valve_seat_entrust
    set entrust_no = #{entrustNo,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      graph_no = #{graphNo,jdbcType=VARCHAR},
      specifications = #{specifications,jdbcType=VARCHAR},
      model = #{model,jdbcType=VARCHAR},
      qty = #{qty,jdbcType=INTEGER},
      qualified_number = #{qualifiedNumber,jdbcType=INTEGER},
      status = #{status,jdbcType=TINYINT},
      inspect_status = #{inspectStatus,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>