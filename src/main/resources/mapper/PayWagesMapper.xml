<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.deepsoft.haolifa.dao.repository.PayWagesMapper" >
  <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.PayWages" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="serial" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="department" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="user_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="required_attendance_days" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="actual_attendance_days" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="late_and_leave_times" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="late_and_leave_fine" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="absenteeism_times" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="absenteeism_fine" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="full_attendance_money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="by_piece_count" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="by_piece_money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="temporary_dispatch_count" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="temporary_dispatch_money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="odd_job_count" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="odd_job_money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="industrial_waste_count" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="industrial_waste_money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="min_live_security_fund" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="accrued_performance_salary" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="total_money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="commendation_money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="lunch_allowance_money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="overtime_pay_money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="other_subsidies_money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="total_payable_money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="deduct_personal_insurance_money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="total_tax_payable_money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="taxable_wages_money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="deduction_personal_income_tax" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="net_salary_money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="remark" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="create_user" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="update_user" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="wages_year" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="wages_month" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, serial, department, user_name, required_attendance_days, actual_attendance_days, 
    late_and_leave_times, late_and_leave_fine, absenteeism_times, absenteeism_fine, full_attendance_money, 
    by_piece_count, by_piece_money, temporary_dispatch_count, temporary_dispatch_money, 
    odd_job_count, odd_job_money, industrial_waste_count, industrial_waste_money, min_live_security_fund, 
    accrued_performance_salary, total_money, commendation_money, lunch_allowance_money, 
    overtime_pay_money, other_subsidies_money, total_payable_money, deduct_personal_insurance_money, 
    total_tax_payable_money, taxable_wages_money, deduction_personal_income_tax, net_salary_money, 
    remark, create_user, update_user, create_time, update_time, wages_year, wages_month, 
    user_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.deepsoft.haolifa.model.domain.PayWagesExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pay_wages
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from pay_wages
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from pay_wages
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.PayWagesExample" >
    delete from pay_wages
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.PayWages" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into pay_wages (serial, department, user_name, 
      required_attendance_days, actual_attendance_days, 
      late_and_leave_times, late_and_leave_fine, absenteeism_times, 
      absenteeism_fine, full_attendance_money, by_piece_count, 
      by_piece_money, temporary_dispatch_count, temporary_dispatch_money, 
      odd_job_count, odd_job_money, industrial_waste_count, 
      industrial_waste_money, min_live_security_fund, 
      accrued_performance_salary, total_money, commendation_money, 
      lunch_allowance_money, overtime_pay_money, 
      other_subsidies_money, total_payable_money, 
      deduct_personal_insurance_money, total_tax_payable_money, 
      taxable_wages_money, deduction_personal_income_tax, 
      net_salary_money, remark, create_user, 
      update_user, create_time, update_time, 
      wages_year, wages_month, user_id
      )
    values (#{serial,jdbcType=VARCHAR}, #{department,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, 
      #{requiredAttendanceDays,jdbcType=INTEGER}, #{actualAttendanceDays,jdbcType=INTEGER}, 
      #{lateAndLeaveTimes,jdbcType=INTEGER}, #{lateAndLeaveFine,jdbcType=DECIMAL}, #{absenteeismTimes,jdbcType=INTEGER}, 
      #{absenteeismFine,jdbcType=DECIMAL}, #{fullAttendanceMoney,jdbcType=DECIMAL}, #{byPieceCount,jdbcType=INTEGER}, 
      #{byPieceMoney,jdbcType=DECIMAL}, #{temporaryDispatchCount,jdbcType=INTEGER}, #{temporaryDispatchMoney,jdbcType=DECIMAL}, 
      #{oddJobCount,jdbcType=INTEGER}, #{oddJobMoney,jdbcType=DECIMAL}, #{industrialWasteCount,jdbcType=INTEGER}, 
      #{industrialWasteMoney,jdbcType=DECIMAL}, #{minLiveSecurityFund,jdbcType=DECIMAL}, 
      #{accruedPerformanceSalary,jdbcType=DECIMAL}, #{totalMoney,jdbcType=DECIMAL}, #{commendationMoney,jdbcType=DECIMAL}, 
      #{lunchAllowanceMoney,jdbcType=DECIMAL}, #{overtimePayMoney,jdbcType=DECIMAL}, 
      #{otherSubsidiesMoney,jdbcType=DECIMAL}, #{totalPayableMoney,jdbcType=DECIMAL}, 
      #{deductPersonalInsuranceMoney,jdbcType=DECIMAL}, #{totalTaxPayableMoney,jdbcType=DECIMAL}, 
      #{taxableWagesMoney,jdbcType=DECIMAL}, #{deductionPersonalIncomeTax,jdbcType=DECIMAL}, 
      #{netSalaryMoney,jdbcType=DECIMAL}, #{remark,jdbcType=VARCHAR}, #{createUser,jdbcType=VARCHAR}, 
      #{updateUser,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{wagesYear,jdbcType=VARCHAR}, #{wagesMonth,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.PayWages" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into pay_wages
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="serial != null" >
        serial,
      </if>
      <if test="department != null" >
        department,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="requiredAttendanceDays != null" >
        required_attendance_days,
      </if>
      <if test="actualAttendanceDays != null" >
        actual_attendance_days,
      </if>
      <if test="lateAndLeaveTimes != null" >
        late_and_leave_times,
      </if>
      <if test="lateAndLeaveFine != null" >
        late_and_leave_fine,
      </if>
      <if test="absenteeismTimes != null" >
        absenteeism_times,
      </if>
      <if test="absenteeismFine != null" >
        absenteeism_fine,
      </if>
      <if test="fullAttendanceMoney != null" >
        full_attendance_money,
      </if>
      <if test="byPieceCount != null" >
        by_piece_count,
      </if>
      <if test="byPieceMoney != null" >
        by_piece_money,
      </if>
      <if test="temporaryDispatchCount != null" >
        temporary_dispatch_count,
      </if>
      <if test="temporaryDispatchMoney != null" >
        temporary_dispatch_money,
      </if>
      <if test="oddJobCount != null" >
        odd_job_count,
      </if>
      <if test="oddJobMoney != null" >
        odd_job_money,
      </if>
      <if test="industrialWasteCount != null" >
        industrial_waste_count,
      </if>
      <if test="industrialWasteMoney != null" >
        industrial_waste_money,
      </if>
      <if test="minLiveSecurityFund != null" >
        min_live_security_fund,
      </if>
      <if test="accruedPerformanceSalary != null" >
        accrued_performance_salary,
      </if>
      <if test="totalMoney != null" >
        total_money,
      </if>
      <if test="commendationMoney != null" >
        commendation_money,
      </if>
      <if test="lunchAllowanceMoney != null" >
        lunch_allowance_money,
      </if>
      <if test="overtimePayMoney != null" >
        overtime_pay_money,
      </if>
      <if test="otherSubsidiesMoney != null" >
        other_subsidies_money,
      </if>
      <if test="totalPayableMoney != null" >
        total_payable_money,
      </if>
      <if test="deductPersonalInsuranceMoney != null" >
        deduct_personal_insurance_money,
      </if>
      <if test="totalTaxPayableMoney != null" >
        total_tax_payable_money,
      </if>
      <if test="taxableWagesMoney != null" >
        taxable_wages_money,
      </if>
      <if test="deductionPersonalIncomeTax != null" >
        deduction_personal_income_tax,
      </if>
      <if test="netSalaryMoney != null" >
        net_salary_money,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="createUser != null" >
        create_user,
      </if>
      <if test="updateUser != null" >
        update_user,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="wagesYear != null" >
        wages_year,
      </if>
      <if test="wagesMonth != null" >
        wages_month,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="serial != null" >
        #{serial,jdbcType=VARCHAR},
      </if>
      <if test="department != null" >
        #{department,jdbcType=VARCHAR},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="requiredAttendanceDays != null" >
        #{requiredAttendanceDays,jdbcType=INTEGER},
      </if>
      <if test="actualAttendanceDays != null" >
        #{actualAttendanceDays,jdbcType=INTEGER},
      </if>
      <if test="lateAndLeaveTimes != null" >
        #{lateAndLeaveTimes,jdbcType=INTEGER},
      </if>
      <if test="lateAndLeaveFine != null" >
        #{lateAndLeaveFine,jdbcType=DECIMAL},
      </if>
      <if test="absenteeismTimes != null" >
        #{absenteeismTimes,jdbcType=INTEGER},
      </if>
      <if test="absenteeismFine != null" >
        #{absenteeismFine,jdbcType=DECIMAL},
      </if>
      <if test="fullAttendanceMoney != null" >
        #{fullAttendanceMoney,jdbcType=DECIMAL},
      </if>
      <if test="byPieceCount != null" >
        #{byPieceCount,jdbcType=INTEGER},
      </if>
      <if test="byPieceMoney != null" >
        #{byPieceMoney,jdbcType=DECIMAL},
      </if>
      <if test="temporaryDispatchCount != null" >
        #{temporaryDispatchCount,jdbcType=INTEGER},
      </if>
      <if test="temporaryDispatchMoney != null" >
        #{temporaryDispatchMoney,jdbcType=DECIMAL},
      </if>
      <if test="oddJobCount != null" >
        #{oddJobCount,jdbcType=INTEGER},
      </if>
      <if test="oddJobMoney != null" >
        #{oddJobMoney,jdbcType=DECIMAL},
      </if>
      <if test="industrialWasteCount != null" >
        #{industrialWasteCount,jdbcType=INTEGER},
      </if>
      <if test="industrialWasteMoney != null" >
        #{industrialWasteMoney,jdbcType=DECIMAL},
      </if>
      <if test="minLiveSecurityFund != null" >
        #{minLiveSecurityFund,jdbcType=DECIMAL},
      </if>
      <if test="accruedPerformanceSalary != null" >
        #{accruedPerformanceSalary,jdbcType=DECIMAL},
      </if>
      <if test="totalMoney != null" >
        #{totalMoney,jdbcType=DECIMAL},
      </if>
      <if test="commendationMoney != null" >
        #{commendationMoney,jdbcType=DECIMAL},
      </if>
      <if test="lunchAllowanceMoney != null" >
        #{lunchAllowanceMoney,jdbcType=DECIMAL},
      </if>
      <if test="overtimePayMoney != null" >
        #{overtimePayMoney,jdbcType=DECIMAL},
      </if>
      <if test="otherSubsidiesMoney != null" >
        #{otherSubsidiesMoney,jdbcType=DECIMAL},
      </if>
      <if test="totalPayableMoney != null" >
        #{totalPayableMoney,jdbcType=DECIMAL},
      </if>
      <if test="deductPersonalInsuranceMoney != null" >
        #{deductPersonalInsuranceMoney,jdbcType=DECIMAL},
      </if>
      <if test="totalTaxPayableMoney != null" >
        #{totalTaxPayableMoney,jdbcType=DECIMAL},
      </if>
      <if test="taxableWagesMoney != null" >
        #{taxableWagesMoney,jdbcType=DECIMAL},
      </if>
      <if test="deductionPersonalIncomeTax != null" >
        #{deductionPersonalIncomeTax,jdbcType=DECIMAL},
      </if>
      <if test="netSalaryMoney != null" >
        #{netSalaryMoney,jdbcType=DECIMAL},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createUser != null" >
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateUser != null" >
        #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="wagesYear != null" >
        #{wagesYear,jdbcType=VARCHAR},
      </if>
      <if test="wagesMonth != null" >
        #{wagesMonth,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.PayWagesExample" resultType="java.lang.Integer" >
    select count(*) from pay_wages
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update pay_wages
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.serial != null" >
        serial = #{record.serial,jdbcType=VARCHAR},
      </if>
      <if test="record.department != null" >
        department = #{record.department,jdbcType=VARCHAR},
      </if>
      <if test="record.userName != null" >
        user_name = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.requiredAttendanceDays != null" >
        required_attendance_days = #{record.requiredAttendanceDays,jdbcType=INTEGER},
      </if>
      <if test="record.actualAttendanceDays != null" >
        actual_attendance_days = #{record.actualAttendanceDays,jdbcType=INTEGER},
      </if>
      <if test="record.lateAndLeaveTimes != null" >
        late_and_leave_times = #{record.lateAndLeaveTimes,jdbcType=INTEGER},
      </if>
      <if test="record.lateAndLeaveFine != null" >
        late_and_leave_fine = #{record.lateAndLeaveFine,jdbcType=DECIMAL},
      </if>
      <if test="record.absenteeismTimes != null" >
        absenteeism_times = #{record.absenteeismTimes,jdbcType=INTEGER},
      </if>
      <if test="record.absenteeismFine != null" >
        absenteeism_fine = #{record.absenteeismFine,jdbcType=DECIMAL},
      </if>
      <if test="record.fullAttendanceMoney != null" >
        full_attendance_money = #{record.fullAttendanceMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.byPieceCount != null" >
        by_piece_count = #{record.byPieceCount,jdbcType=INTEGER},
      </if>
      <if test="record.byPieceMoney != null" >
        by_piece_money = #{record.byPieceMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.temporaryDispatchCount != null" >
        temporary_dispatch_count = #{record.temporaryDispatchCount,jdbcType=INTEGER},
      </if>
      <if test="record.temporaryDispatchMoney != null" >
        temporary_dispatch_money = #{record.temporaryDispatchMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.oddJobCount != null" >
        odd_job_count = #{record.oddJobCount,jdbcType=INTEGER},
      </if>
      <if test="record.oddJobMoney != null" >
        odd_job_money = #{record.oddJobMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.industrialWasteCount != null" >
        industrial_waste_count = #{record.industrialWasteCount,jdbcType=INTEGER},
      </if>
      <if test="record.industrialWasteMoney != null" >
        industrial_waste_money = #{record.industrialWasteMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.minLiveSecurityFund != null" >
        min_live_security_fund = #{record.minLiveSecurityFund,jdbcType=DECIMAL},
      </if>
      <if test="record.accruedPerformanceSalary != null" >
        accrued_performance_salary = #{record.accruedPerformanceSalary,jdbcType=DECIMAL},
      </if>
      <if test="record.totalMoney != null" >
        total_money = #{record.totalMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.commendationMoney != null" >
        commendation_money = #{record.commendationMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.lunchAllowanceMoney != null" >
        lunch_allowance_money = #{record.lunchAllowanceMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.overtimePayMoney != null" >
        overtime_pay_money = #{record.overtimePayMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.otherSubsidiesMoney != null" >
        other_subsidies_money = #{record.otherSubsidiesMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.totalPayableMoney != null" >
        total_payable_money = #{record.totalPayableMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.deductPersonalInsuranceMoney != null" >
        deduct_personal_insurance_money = #{record.deductPersonalInsuranceMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.totalTaxPayableMoney != null" >
        total_tax_payable_money = #{record.totalTaxPayableMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.taxableWagesMoney != null" >
        taxable_wages_money = #{record.taxableWagesMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.deductionPersonalIncomeTax != null" >
        deduction_personal_income_tax = #{record.deductionPersonalIncomeTax,jdbcType=DECIMAL},
      </if>
      <if test="record.netSalaryMoney != null" >
        net_salary_money = #{record.netSalaryMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.createUser != null" >
        create_user = #{record.createUser,jdbcType=VARCHAR},
      </if>
      <if test="record.updateUser != null" >
        update_user = #{record.updateUser,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.wagesYear != null" >
        wages_year = #{record.wagesYear,jdbcType=VARCHAR},
      </if>
      <if test="record.wagesMonth != null" >
        wages_month = #{record.wagesMonth,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update pay_wages
    set id = #{record.id,jdbcType=INTEGER},
      serial = #{record.serial,jdbcType=VARCHAR},
      department = #{record.department,jdbcType=VARCHAR},
      user_name = #{record.userName,jdbcType=VARCHAR},
      required_attendance_days = #{record.requiredAttendanceDays,jdbcType=INTEGER},
      actual_attendance_days = #{record.actualAttendanceDays,jdbcType=INTEGER},
      late_and_leave_times = #{record.lateAndLeaveTimes,jdbcType=INTEGER},
      late_and_leave_fine = #{record.lateAndLeaveFine,jdbcType=DECIMAL},
      absenteeism_times = #{record.absenteeismTimes,jdbcType=INTEGER},
      absenteeism_fine = #{record.absenteeismFine,jdbcType=DECIMAL},
      full_attendance_money = #{record.fullAttendanceMoney,jdbcType=DECIMAL},
      by_piece_count = #{record.byPieceCount,jdbcType=INTEGER},
      by_piece_money = #{record.byPieceMoney,jdbcType=DECIMAL},
      temporary_dispatch_count = #{record.temporaryDispatchCount,jdbcType=INTEGER},
      temporary_dispatch_money = #{record.temporaryDispatchMoney,jdbcType=DECIMAL},
      odd_job_count = #{record.oddJobCount,jdbcType=INTEGER},
      odd_job_money = #{record.oddJobMoney,jdbcType=DECIMAL},
      industrial_waste_count = #{record.industrialWasteCount,jdbcType=INTEGER},
      industrial_waste_money = #{record.industrialWasteMoney,jdbcType=DECIMAL},
      min_live_security_fund = #{record.minLiveSecurityFund,jdbcType=DECIMAL},
      accrued_performance_salary = #{record.accruedPerformanceSalary,jdbcType=DECIMAL},
      total_money = #{record.totalMoney,jdbcType=DECIMAL},
      commendation_money = #{record.commendationMoney,jdbcType=DECIMAL},
      lunch_allowance_money = #{record.lunchAllowanceMoney,jdbcType=DECIMAL},
      overtime_pay_money = #{record.overtimePayMoney,jdbcType=DECIMAL},
      other_subsidies_money = #{record.otherSubsidiesMoney,jdbcType=DECIMAL},
      total_payable_money = #{record.totalPayableMoney,jdbcType=DECIMAL},
      deduct_personal_insurance_money = #{record.deductPersonalInsuranceMoney,jdbcType=DECIMAL},
      total_tax_payable_money = #{record.totalTaxPayableMoney,jdbcType=DECIMAL},
      taxable_wages_money = #{record.taxableWagesMoney,jdbcType=DECIMAL},
      deduction_personal_income_tax = #{record.deductionPersonalIncomeTax,jdbcType=DECIMAL},
      net_salary_money = #{record.netSalaryMoney,jdbcType=DECIMAL},
      remark = #{record.remark,jdbcType=VARCHAR},
      create_user = #{record.createUser,jdbcType=VARCHAR},
      update_user = #{record.updateUser,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      wages_year = #{record.wagesYear,jdbcType=VARCHAR},
      wages_month = #{record.wagesMonth,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.PayWages" >
    update pay_wages
    <set >
      <if test="serial != null" >
        serial = #{serial,jdbcType=VARCHAR},
      </if>
      <if test="department != null" >
        department = #{department,jdbcType=VARCHAR},
      </if>
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="requiredAttendanceDays != null" >
        required_attendance_days = #{requiredAttendanceDays,jdbcType=INTEGER},
      </if>
      <if test="actualAttendanceDays != null" >
        actual_attendance_days = #{actualAttendanceDays,jdbcType=INTEGER},
      </if>
      <if test="lateAndLeaveTimes != null" >
        late_and_leave_times = #{lateAndLeaveTimes,jdbcType=INTEGER},
      </if>
      <if test="lateAndLeaveFine != null" >
        late_and_leave_fine = #{lateAndLeaveFine,jdbcType=DECIMAL},
      </if>
      <if test="absenteeismTimes != null" >
        absenteeism_times = #{absenteeismTimes,jdbcType=INTEGER},
      </if>
      <if test="absenteeismFine != null" >
        absenteeism_fine = #{absenteeismFine,jdbcType=DECIMAL},
      </if>
      <if test="fullAttendanceMoney != null" >
        full_attendance_money = #{fullAttendanceMoney,jdbcType=DECIMAL},
      </if>
      <if test="byPieceCount != null" >
        by_piece_count = #{byPieceCount,jdbcType=INTEGER},
      </if>
      <if test="byPieceMoney != null" >
        by_piece_money = #{byPieceMoney,jdbcType=DECIMAL},
      </if>
      <if test="temporaryDispatchCount != null" >
        temporary_dispatch_count = #{temporaryDispatchCount,jdbcType=INTEGER},
      </if>
      <if test="temporaryDispatchMoney != null" >
        temporary_dispatch_money = #{temporaryDispatchMoney,jdbcType=DECIMAL},
      </if>
      <if test="oddJobCount != null" >
        odd_job_count = #{oddJobCount,jdbcType=INTEGER},
      </if>
      <if test="oddJobMoney != null" >
        odd_job_money = #{oddJobMoney,jdbcType=DECIMAL},
      </if>
      <if test="industrialWasteCount != null" >
        industrial_waste_count = #{industrialWasteCount,jdbcType=INTEGER},
      </if>
      <if test="industrialWasteMoney != null" >
        industrial_waste_money = #{industrialWasteMoney,jdbcType=DECIMAL},
      </if>
      <if test="minLiveSecurityFund != null" >
        min_live_security_fund = #{minLiveSecurityFund,jdbcType=DECIMAL},
      </if>
      <if test="accruedPerformanceSalary != null" >
        accrued_performance_salary = #{accruedPerformanceSalary,jdbcType=DECIMAL},
      </if>
      <if test="totalMoney != null" >
        total_money = #{totalMoney,jdbcType=DECIMAL},
      </if>
      <if test="commendationMoney != null" >
        commendation_money = #{commendationMoney,jdbcType=DECIMAL},
      </if>
      <if test="lunchAllowanceMoney != null" >
        lunch_allowance_money = #{lunchAllowanceMoney,jdbcType=DECIMAL},
      </if>
      <if test="overtimePayMoney != null" >
        overtime_pay_money = #{overtimePayMoney,jdbcType=DECIMAL},
      </if>
      <if test="otherSubsidiesMoney != null" >
        other_subsidies_money = #{otherSubsidiesMoney,jdbcType=DECIMAL},
      </if>
      <if test="totalPayableMoney != null" >
        total_payable_money = #{totalPayableMoney,jdbcType=DECIMAL},
      </if>
      <if test="deductPersonalInsuranceMoney != null" >
        deduct_personal_insurance_money = #{deductPersonalInsuranceMoney,jdbcType=DECIMAL},
      </if>
      <if test="totalTaxPayableMoney != null" >
        total_tax_payable_money = #{totalTaxPayableMoney,jdbcType=DECIMAL},
      </if>
      <if test="taxableWagesMoney != null" >
        taxable_wages_money = #{taxableWagesMoney,jdbcType=DECIMAL},
      </if>
      <if test="deductionPersonalIncomeTax != null" >
        deduction_personal_income_tax = #{deductionPersonalIncomeTax,jdbcType=DECIMAL},
      </if>
      <if test="netSalaryMoney != null" >
        net_salary_money = #{netSalaryMoney,jdbcType=DECIMAL},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createUser != null" >
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="wagesYear != null" >
        wages_year = #{wagesYear,jdbcType=VARCHAR},
      </if>
      <if test="wagesMonth != null" >
        wages_month = #{wagesMonth,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.PayWages" >
    update pay_wages
    set serial = #{serial,jdbcType=VARCHAR},
      department = #{department,jdbcType=VARCHAR},
      user_name = #{userName,jdbcType=VARCHAR},
      required_attendance_days = #{requiredAttendanceDays,jdbcType=INTEGER},
      actual_attendance_days = #{actualAttendanceDays,jdbcType=INTEGER},
      late_and_leave_times = #{lateAndLeaveTimes,jdbcType=INTEGER},
      late_and_leave_fine = #{lateAndLeaveFine,jdbcType=DECIMAL},
      absenteeism_times = #{absenteeismTimes,jdbcType=INTEGER},
      absenteeism_fine = #{absenteeismFine,jdbcType=DECIMAL},
      full_attendance_money = #{fullAttendanceMoney,jdbcType=DECIMAL},
      by_piece_count = #{byPieceCount,jdbcType=INTEGER},
      by_piece_money = #{byPieceMoney,jdbcType=DECIMAL},
      temporary_dispatch_count = #{temporaryDispatchCount,jdbcType=INTEGER},
      temporary_dispatch_money = #{temporaryDispatchMoney,jdbcType=DECIMAL},
      odd_job_count = #{oddJobCount,jdbcType=INTEGER},
      odd_job_money = #{oddJobMoney,jdbcType=DECIMAL},
      industrial_waste_count = #{industrialWasteCount,jdbcType=INTEGER},
      industrial_waste_money = #{industrialWasteMoney,jdbcType=DECIMAL},
      min_live_security_fund = #{minLiveSecurityFund,jdbcType=DECIMAL},
      accrued_performance_salary = #{accruedPerformanceSalary,jdbcType=DECIMAL},
      total_money = #{totalMoney,jdbcType=DECIMAL},
      commendation_money = #{commendationMoney,jdbcType=DECIMAL},
      lunch_allowance_money = #{lunchAllowanceMoney,jdbcType=DECIMAL},
      overtime_pay_money = #{overtimePayMoney,jdbcType=DECIMAL},
      other_subsidies_money = #{otherSubsidiesMoney,jdbcType=DECIMAL},
      total_payable_money = #{totalPayableMoney,jdbcType=DECIMAL},
      deduct_personal_insurance_money = #{deductPersonalInsuranceMoney,jdbcType=DECIMAL},
      total_tax_payable_money = #{totalTaxPayableMoney,jdbcType=DECIMAL},
      taxable_wages_money = #{taxableWagesMoney,jdbcType=DECIMAL},
      deduction_personal_income_tax = #{deductionPersonalIncomeTax,jdbcType=DECIMAL},
      net_salary_money = #{netSalaryMoney,jdbcType=DECIMAL},
      remark = #{remark,jdbcType=VARCHAR},
      create_user = #{createUser,jdbcType=VARCHAR},
      update_user = #{updateUser,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      wages_year = #{wagesYear,jdbcType=VARCHAR},
      wages_month = #{wagesMonth,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>