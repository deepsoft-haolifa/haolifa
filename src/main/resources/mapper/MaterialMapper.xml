<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.deepsoft.haolifa.dao.repository.MaterialMapper" >
  <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.Material" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="create_user" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="update_user" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="material_classify_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="material_classify_name" jdbcType="CHAR" javaType="java.lang.String" />
      <arg column="name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="material" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="graph_no" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="replace_graph_nos" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="graph_url" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="unit" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="price" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="specifications" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="model" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="actual_weight" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="theoretical_weight" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="tax_rate" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="status" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="safe_quantity" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="safety_factor" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="current_quantity" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="lock_quantity" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="version" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="support_quantity" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="is_delete" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="remark" jdbcType="VARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, create_time, update_time, create_user, update_user, material_classify_id, material_classify_name, 
    name, material, graph_no, replace_graph_nos, graph_url, unit, price, specifications, 
    model, actual_weight, theoretical_weight, tax_rate, status, safe_quantity, safety_factor, 
    current_quantity, lock_quantity, version, support_quantity, is_delete, remark
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.deepsoft.haolifa.model.domain.MaterialExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from material
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from material
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from material
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.MaterialExample" >
    delete from material
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.Material" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into material (create_time, update_time, create_user, 
      update_user, material_classify_id, material_classify_name, 
      name, material, graph_no, 
      replace_graph_nos, graph_url, unit, 
      price, specifications, model, 
      actual_weight, theoretical_weight, tax_rate, 
      status, safe_quantity, safety_factor, 
      current_quantity, lock_quantity, version, 
      support_quantity, is_delete, remark
      )
    values (#{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{createUser,jdbcType=INTEGER}, 
      #{updateUser,jdbcType=INTEGER}, #{materialClassifyId,jdbcType=INTEGER}, #{materialClassifyName,jdbcType=CHAR}, 
      #{name,jdbcType=VARCHAR}, #{material,jdbcType=VARCHAR}, #{graphNo,jdbcType=VARCHAR}, 
      #{replaceGraphNos,jdbcType=VARCHAR}, #{graphUrl,jdbcType=VARCHAR}, #{unit,jdbcType=VARCHAR}, 
      #{price,jdbcType=DECIMAL}, #{specifications,jdbcType=VARCHAR}, #{model,jdbcType=VARCHAR}, 
      #{actualWeight,jdbcType=VARCHAR}, #{theoreticalWeight,jdbcType=VARCHAR}, #{taxRate,jdbcType=VARCHAR}, 
      #{status,jdbcType=TINYINT}, #{safeQuantity,jdbcType=INTEGER}, #{safetyFactor,jdbcType=VARCHAR}, 
      #{currentQuantity,jdbcType=INTEGER}, #{lockQuantity,jdbcType=INTEGER}, #{version,jdbcType=INTEGER}, 
      #{supportQuantity,jdbcType=INTEGER}, #{isDelete,jdbcType=TINYINT}, #{remark,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.Material" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into material
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="createUser != null" >
        create_user,
      </if>
      <if test="updateUser != null" >
        update_user,
      </if>
      <if test="materialClassifyId != null" >
        material_classify_id,
      </if>
      <if test="materialClassifyName != null" >
        material_classify_name,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="material != null" >
        material,
      </if>
      <if test="graphNo != null" >
        graph_no,
      </if>
      <if test="replaceGraphNos != null" >
        replace_graph_nos,
      </if>
      <if test="graphUrl != null" >
        graph_url,
      </if>
      <if test="unit != null" >
        unit,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="specifications != null" >
        specifications,
      </if>
      <if test="model != null" >
        model,
      </if>
      <if test="actualWeight != null" >
        actual_weight,
      </if>
      <if test="theoreticalWeight != null" >
        theoretical_weight,
      </if>
      <if test="taxRate != null" >
        tax_rate,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="safeQuantity != null" >
        safe_quantity,
      </if>
      <if test="safetyFactor != null" >
        safety_factor,
      </if>
      <if test="currentQuantity != null" >
        current_quantity,
      </if>
      <if test="lockQuantity != null" >
        lock_quantity,
      </if>
      <if test="version != null" >
        version,
      </if>
      <if test="supportQuantity != null" >
        support_quantity,
      </if>
      <if test="isDelete != null" >
        is_delete,
      </if>
      <if test="remark != null" >
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        #{createUser,jdbcType=INTEGER},
      </if>
      <if test="updateUser != null" >
        #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="materialClassifyId != null" >
        #{materialClassifyId,jdbcType=INTEGER},
      </if>
      <if test="materialClassifyName != null" >
        #{materialClassifyName,jdbcType=CHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="material != null" >
        #{material,jdbcType=VARCHAR},
      </if>
      <if test="graphNo != null" >
        #{graphNo,jdbcType=VARCHAR},
      </if>
      <if test="replaceGraphNos != null" >
        #{replaceGraphNos,jdbcType=VARCHAR},
      </if>
      <if test="graphUrl != null" >
        #{graphUrl,jdbcType=VARCHAR},
      </if>
      <if test="unit != null" >
        #{unit,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="specifications != null" >
        #{specifications,jdbcType=VARCHAR},
      </if>
      <if test="model != null" >
        #{model,jdbcType=VARCHAR},
      </if>
      <if test="actualWeight != null" >
        #{actualWeight,jdbcType=VARCHAR},
      </if>
      <if test="theoreticalWeight != null" >
        #{theoreticalWeight,jdbcType=VARCHAR},
      </if>
      <if test="taxRate != null" >
        #{taxRate,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="safeQuantity != null" >
        #{safeQuantity,jdbcType=INTEGER},
      </if>
      <if test="safetyFactor != null" >
        #{safetyFactor,jdbcType=VARCHAR},
      </if>
      <if test="currentQuantity != null" >
        #{currentQuantity,jdbcType=INTEGER},
      </if>
      <if test="lockQuantity != null" >
        #{lockQuantity,jdbcType=INTEGER},
      </if>
      <if test="version != null" >
        #{version,jdbcType=INTEGER},
      </if>
      <if test="supportQuantity != null" >
        #{supportQuantity,jdbcType=INTEGER},
      </if>
      <if test="isDelete != null" >
        #{isDelete,jdbcType=TINYINT},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.MaterialExample" resultType="java.lang.Integer" >
    select count(*) from material
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update material
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUser != null" >
        create_user = #{record.createUser,jdbcType=INTEGER},
      </if>
      <if test="record.updateUser != null" >
        update_user = #{record.updateUser,jdbcType=INTEGER},
      </if>
      <if test="record.materialClassifyId != null" >
        material_classify_id = #{record.materialClassifyId,jdbcType=INTEGER},
      </if>
      <if test="record.materialClassifyName != null" >
        material_classify_name = #{record.materialClassifyName,jdbcType=CHAR},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.material != null" >
        material = #{record.material,jdbcType=VARCHAR},
      </if>
      <if test="record.graphNo != null" >
        graph_no = #{record.graphNo,jdbcType=VARCHAR},
      </if>
      <if test="record.replaceGraphNos != null" >
        replace_graph_nos = #{record.replaceGraphNos,jdbcType=VARCHAR},
      </if>
      <if test="record.graphUrl != null" >
        graph_url = #{record.graphUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.unit != null" >
        unit = #{record.unit,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null" >
        price = #{record.price,jdbcType=DECIMAL},
      </if>
      <if test="record.specifications != null" >
        specifications = #{record.specifications,jdbcType=VARCHAR},
      </if>
      <if test="record.model != null" >
        model = #{record.model,jdbcType=VARCHAR},
      </if>
      <if test="record.actualWeight != null" >
        actual_weight = #{record.actualWeight,jdbcType=VARCHAR},
      </if>
      <if test="record.theoreticalWeight != null" >
        theoretical_weight = #{record.theoreticalWeight,jdbcType=VARCHAR},
      </if>
      <if test="record.taxRate != null" >
        tax_rate = #{record.taxRate,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.safeQuantity != null" >
        safe_quantity = #{record.safeQuantity,jdbcType=INTEGER},
      </if>
      <if test="record.safetyFactor != null" >
        safety_factor = #{record.safetyFactor,jdbcType=VARCHAR},
      </if>
      <if test="record.currentQuantity != null" >
        current_quantity = #{record.currentQuantity,jdbcType=INTEGER},
      </if>
      <if test="record.lockQuantity != null" >
        lock_quantity = #{record.lockQuantity,jdbcType=INTEGER},
      </if>
      <if test="record.version != null" >
        version = #{record.version,jdbcType=INTEGER},
      </if>
      <if test="record.supportQuantity != null" >
        support_quantity = #{record.supportQuantity,jdbcType=INTEGER},
      </if>
      <if test="record.isDelete != null" >
        is_delete = #{record.isDelete,jdbcType=TINYINT},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update material
    set id = #{record.id,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_user = #{record.createUser,jdbcType=INTEGER},
      update_user = #{record.updateUser,jdbcType=INTEGER},
      material_classify_id = #{record.materialClassifyId,jdbcType=INTEGER},
      material_classify_name = #{record.materialClassifyName,jdbcType=CHAR},
      name = #{record.name,jdbcType=VARCHAR},
      material = #{record.material,jdbcType=VARCHAR},
      graph_no = #{record.graphNo,jdbcType=VARCHAR},
      replace_graph_nos = #{record.replaceGraphNos,jdbcType=VARCHAR},
      graph_url = #{record.graphUrl,jdbcType=VARCHAR},
      unit = #{record.unit,jdbcType=VARCHAR},
      price = #{record.price,jdbcType=DECIMAL},
      specifications = #{record.specifications,jdbcType=VARCHAR},
      model = #{record.model,jdbcType=VARCHAR},
      actual_weight = #{record.actualWeight,jdbcType=VARCHAR},
      theoretical_weight = #{record.theoreticalWeight,jdbcType=VARCHAR},
      tax_rate = #{record.taxRate,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=TINYINT},
      safe_quantity = #{record.safeQuantity,jdbcType=INTEGER},
      safety_factor = #{record.safetyFactor,jdbcType=VARCHAR},
      current_quantity = #{record.currentQuantity,jdbcType=INTEGER},
      lock_quantity = #{record.lockQuantity,jdbcType=INTEGER},
      version = #{record.version,jdbcType=INTEGER},
      support_quantity = #{record.supportQuantity,jdbcType=INTEGER},
      is_delete = #{record.isDelete,jdbcType=TINYINT},
      remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.Material" >
    update material
    <set >
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        create_user = #{createUser,jdbcType=INTEGER},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="materialClassifyId != null" >
        material_classify_id = #{materialClassifyId,jdbcType=INTEGER},
      </if>
      <if test="materialClassifyName != null" >
        material_classify_name = #{materialClassifyName,jdbcType=CHAR},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="material != null" >
        material = #{material,jdbcType=VARCHAR},
      </if>
      <if test="graphNo != null" >
        graph_no = #{graphNo,jdbcType=VARCHAR},
      </if>
      <if test="replaceGraphNos != null" >
        replace_graph_nos = #{replaceGraphNos,jdbcType=VARCHAR},
      </if>
      <if test="graphUrl != null" >
        graph_url = #{graphUrl,jdbcType=VARCHAR},
      </if>
      <if test="unit != null" >
        unit = #{unit,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="specifications != null" >
        specifications = #{specifications,jdbcType=VARCHAR},
      </if>
      <if test="model != null" >
        model = #{model,jdbcType=VARCHAR},
      </if>
      <if test="actualWeight != null" >
        actual_weight = #{actualWeight,jdbcType=VARCHAR},
      </if>
      <if test="theoreticalWeight != null" >
        theoretical_weight = #{theoreticalWeight,jdbcType=VARCHAR},
      </if>
      <if test="taxRate != null" >
        tax_rate = #{taxRate,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="safeQuantity != null" >
        safe_quantity = #{safeQuantity,jdbcType=INTEGER},
      </if>
      <if test="safetyFactor != null" >
        safety_factor = #{safetyFactor,jdbcType=VARCHAR},
      </if>
      <if test="currentQuantity != null" >
        current_quantity = #{currentQuantity,jdbcType=INTEGER},
      </if>
      <if test="lockQuantity != null" >
        lock_quantity = #{lockQuantity,jdbcType=INTEGER},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="supportQuantity != null" >
        support_quantity = #{supportQuantity,jdbcType=INTEGER},
      </if>
      <if test="isDelete != null" >
        is_delete = #{isDelete,jdbcType=TINYINT},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.Material" >
    update material
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=INTEGER},
      update_user = #{updateUser,jdbcType=INTEGER},
      material_classify_id = #{materialClassifyId,jdbcType=INTEGER},
      material_classify_name = #{materialClassifyName,jdbcType=CHAR},
      name = #{name,jdbcType=VARCHAR},
      material = #{material,jdbcType=VARCHAR},
      graph_no = #{graphNo,jdbcType=VARCHAR},
      replace_graph_nos = #{replaceGraphNos,jdbcType=VARCHAR},
      graph_url = #{graphUrl,jdbcType=VARCHAR},
      unit = #{unit,jdbcType=VARCHAR},
      price = #{price,jdbcType=DECIMAL},
      specifications = #{specifications,jdbcType=VARCHAR},
      model = #{model,jdbcType=VARCHAR},
      actual_weight = #{actualWeight,jdbcType=VARCHAR},
      theoretical_weight = #{theoreticalWeight,jdbcType=VARCHAR},
      tax_rate = #{taxRate,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT},
      safe_quantity = #{safeQuantity,jdbcType=INTEGER},
      safety_factor = #{safetyFactor,jdbcType=VARCHAR},
      current_quantity = #{currentQuantity,jdbcType=INTEGER},
      lock_quantity = #{lockQuantity,jdbcType=INTEGER},
      version = #{version,jdbcType=INTEGER},
      support_quantity = #{supportQuantity,jdbcType=INTEGER},
      is_delete = #{isDelete,jdbcType=TINYINT},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>