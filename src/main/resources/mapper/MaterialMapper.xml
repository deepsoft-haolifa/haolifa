<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.deepsoft.haolifa.dao.repository.MaterialMapper">
  <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.Material">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="create_user" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="update_user" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="material_classify_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="material_classify_name" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="material" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="graph_no" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="unit" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="price" javaType="java.math.BigDecimal" jdbcType="DECIMAL" />
      <arg column="specifications" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="model" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="actual_weight" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="theoretical_weight" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="tax_rate" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="status" javaType="java.lang.Byte" jdbcType="TINYINT" />
      <arg column="safe_quantity" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="safety_factor" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="is_delete" javaType="java.lang.Byte" jdbcType="TINYINT" />
      <arg column="remark" javaType="java.lang.String" jdbcType="VARCHAR" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, create_time, update_time, create_user, update_user, material_classify_id, material_classify_name, 
    name, material, graph_no, unit, price, specifications, model, actual_weight, theoretical_weight, 
    tax_rate, status, safe_quantity, safety_factor, is_delete, remark
  </sql>
  <select id="selectByExample" parameterType="com.deepsoft.haolifa.model.domain.MaterialExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from material
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from material
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from material
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.MaterialExample">
    delete from material
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.Material">
    insert into material (id, create_time, update_time, 
      create_user, update_user, material_classify_id, 
      material_classify_name, name, material, 
      graph_no, unit, price, 
      specifications, model, actual_weight, 
      theoretical_weight, tax_rate, status, 
      safe_quantity, safety_factor, is_delete, 
      remark)
    values (#{id,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{createUser,jdbcType=INTEGER}, #{updateUser,jdbcType=INTEGER}, #{materialClassifyId,jdbcType=INTEGER}, 
      #{materialClassifyName,jdbcType=CHAR}, #{name,jdbcType=VARCHAR}, #{material,jdbcType=VARCHAR}, 
      #{graphNo,jdbcType=VARCHAR}, #{unit,jdbcType=VARCHAR}, #{price,jdbcType=DECIMAL}, 
      #{specifications,jdbcType=VARCHAR}, #{model,jdbcType=VARCHAR}, #{actualWeight,jdbcType=VARCHAR}, 
      #{theoreticalWeight,jdbcType=VARCHAR}, #{taxRate,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT}, 
      #{safeQuantity,jdbcType=INTEGER}, #{safetyFactor,jdbcType=VARCHAR}, #{isDelete,jdbcType=TINYINT}, 
      #{remark,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.Material">
    insert into material
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
      <if test="materialClassifyId != null">
        material_classify_id,
      </if>
      <if test="materialClassifyName != null">
        material_classify_name,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="material != null">
        material,
      </if>
      <if test="graphNo != null">
        graph_no,
      </if>
      <if test="unit != null">
        unit,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="specifications != null">
        specifications,
      </if>
      <if test="model != null">
        model,
      </if>
      <if test="actualWeight != null">
        actual_weight,
      </if>
      <if test="theoreticalWeight != null">
        theoretical_weight,
      </if>
      <if test="taxRate != null">
        tax_rate,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="safeQuantity != null">
        safe_quantity,
      </if>
      <if test="safetyFactor != null">
        safety_factor,
      </if>
      <if test="isDelete != null">
        is_delete,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=INTEGER},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="materialClassifyId != null">
        #{materialClassifyId,jdbcType=INTEGER},
      </if>
      <if test="materialClassifyName != null">
        #{materialClassifyName,jdbcType=CHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="material != null">
        #{material,jdbcType=VARCHAR},
      </if>
      <if test="graphNo != null">
        #{graphNo,jdbcType=VARCHAR},
      </if>
      <if test="unit != null">
        #{unit,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="specifications != null">
        #{specifications,jdbcType=VARCHAR},
      </if>
      <if test="model != null">
        #{model,jdbcType=VARCHAR},
      </if>
      <if test="actualWeight != null">
        #{actualWeight,jdbcType=VARCHAR},
      </if>
      <if test="theoreticalWeight != null">
        #{theoreticalWeight,jdbcType=VARCHAR},
      </if>
      <if test="taxRate != null">
        #{taxRate,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="safeQuantity != null">
        #{safeQuantity,jdbcType=INTEGER},
      </if>
      <if test="safetyFactor != null">
        #{safetyFactor,jdbcType=VARCHAR},
      </if>
      <if test="isDelete != null">
        #{isDelete,jdbcType=TINYINT},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.MaterialExample" resultType="java.lang.Long">
    select count(*) from material
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update material
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUser != null">
        create_user = #{record.createUser,jdbcType=INTEGER},
      </if>
      <if test="record.updateUser != null">
        update_user = #{record.updateUser,jdbcType=INTEGER},
      </if>
      <if test="record.materialClassifyId != null">
        material_classify_id = #{record.materialClassifyId,jdbcType=INTEGER},
      </if>
      <if test="record.materialClassifyName != null">
        material_classify_name = #{record.materialClassifyName,jdbcType=CHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.material != null">
        material = #{record.material,jdbcType=VARCHAR},
      </if>
      <if test="record.graphNo != null">
        graph_no = #{record.graphNo,jdbcType=VARCHAR},
      </if>
      <if test="record.unit != null">
        unit = #{record.unit,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=DECIMAL},
      </if>
      <if test="record.specifications != null">
        specifications = #{record.specifications,jdbcType=VARCHAR},
      </if>
      <if test="record.model != null">
        model = #{record.model,jdbcType=VARCHAR},
      </if>
      <if test="record.actualWeight != null">
        actual_weight = #{record.actualWeight,jdbcType=VARCHAR},
      </if>
      <if test="record.theoreticalWeight != null">
        theoretical_weight = #{record.theoreticalWeight,jdbcType=VARCHAR},
      </if>
      <if test="record.taxRate != null">
        tax_rate = #{record.taxRate,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.safeQuantity != null">
        safe_quantity = #{record.safeQuantity,jdbcType=INTEGER},
      </if>
      <if test="record.safetyFactor != null">
        safety_factor = #{record.safetyFactor,jdbcType=VARCHAR},
      </if>
      <if test="record.isDelete != null">
        is_delete = #{record.isDelete,jdbcType=TINYINT},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update material
    set id = #{record.id,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_user = #{record.createUser,jdbcType=INTEGER},
      update_user = #{record.updateUser,jdbcType=INTEGER},
      material_classify_id = #{record.materialClassifyId,jdbcType=INTEGER},
      material_classify_name = #{record.materialClassifyName,jdbcType=CHAR},
      name = #{record.name,jdbcType=VARCHAR},
      material = #{record.material,jdbcType=VARCHAR},
      graph_no = #{record.graphNo,jdbcType=VARCHAR},
      unit = #{record.unit,jdbcType=VARCHAR},
      price = #{record.price,jdbcType=DECIMAL},
      specifications = #{record.specifications,jdbcType=VARCHAR},
      model = #{record.model,jdbcType=VARCHAR},
      actual_weight = #{record.actualWeight,jdbcType=VARCHAR},
      theoretical_weight = #{record.theoreticalWeight,jdbcType=VARCHAR},
      tax_rate = #{record.taxRate,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=TINYINT},
      safe_quantity = #{record.safeQuantity,jdbcType=INTEGER},
      safety_factor = #{record.safetyFactor,jdbcType=VARCHAR},
      is_delete = #{record.isDelete,jdbcType=TINYINT},
      remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.Material">
    update material
    <set>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=INTEGER},
      </if>
      <if test="updateUser != null">
        update_user = #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="materialClassifyId != null">
        material_classify_id = #{materialClassifyId,jdbcType=INTEGER},
      </if>
      <if test="materialClassifyName != null">
        material_classify_name = #{materialClassifyName,jdbcType=CHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="material != null">
        material = #{material,jdbcType=VARCHAR},
      </if>
      <if test="graphNo != null">
        graph_no = #{graphNo,jdbcType=VARCHAR},
      </if>
      <if test="unit != null">
        unit = #{unit,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="specifications != null">
        specifications = #{specifications,jdbcType=VARCHAR},
      </if>
      <if test="model != null">
        model = #{model,jdbcType=VARCHAR},
      </if>
      <if test="actualWeight != null">
        actual_weight = #{actualWeight,jdbcType=VARCHAR},
      </if>
      <if test="theoreticalWeight != null">
        theoretical_weight = #{theoreticalWeight,jdbcType=VARCHAR},
      </if>
      <if test="taxRate != null">
        tax_rate = #{taxRate,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="safeQuantity != null">
        safe_quantity = #{safeQuantity,jdbcType=INTEGER},
      </if>
      <if test="safetyFactor != null">
        safety_factor = #{safetyFactor,jdbcType=VARCHAR},
      </if>
      <if test="isDelete != null">
        is_delete = #{isDelete,jdbcType=TINYINT},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.Material">
    update material
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=INTEGER},
      update_user = #{updateUser,jdbcType=INTEGER},
      material_classify_id = #{materialClassifyId,jdbcType=INTEGER},
      material_classify_name = #{materialClassifyName,jdbcType=CHAR},
      name = #{name,jdbcType=VARCHAR},
      material = #{material,jdbcType=VARCHAR},
      graph_no = #{graphNo,jdbcType=VARCHAR},
      unit = #{unit,jdbcType=VARCHAR},
      price = #{price,jdbcType=DECIMAL},
      specifications = #{specifications,jdbcType=VARCHAR},
      model = #{model,jdbcType=VARCHAR},
      actual_weight = #{actualWeight,jdbcType=VARCHAR},
      theoretical_weight = #{theoreticalWeight,jdbcType=VARCHAR},
      tax_rate = #{taxRate,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT},
      safe_quantity = #{safeQuantity,jdbcType=INTEGER},
      safety_factor = #{safetyFactor,jdbcType=VARCHAR},
      is_delete = #{isDelete,jdbcType=TINYINT},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>