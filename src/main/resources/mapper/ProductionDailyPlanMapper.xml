<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.deepsoft.haolifa.dao.repository.ProductionDailyPlanMapper" >
  <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.ProductionDailyPlan" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="order_no" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="order_number" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="finish_number" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="plan_date" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="plan_finish_date" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="actual_finish_date" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="delivery_date" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="plan_status" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="remark" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="create_user" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="update_user" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, order_no, order_number, finish_number, plan_date, plan_finish_date, actual_finish_date, 
    delivery_date, plan_status, remark, create_time, update_time, create_user, update_user
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.deepsoft.haolifa.model.domain.ProductionDailyPlanExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from production_daily_plan
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from production_daily_plan
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from production_daily_plan
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.ProductionDailyPlanExample" >
    delete from production_daily_plan
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.ProductionDailyPlan" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into production_daily_plan (order_no, order_number, finish_number, 
      plan_date, plan_finish_date, actual_finish_date, 
      delivery_date, plan_status, remark, 
      create_time, update_time, create_user, 
      update_user)
    values (#{orderNo,jdbcType=VARCHAR}, #{orderNumber,jdbcType=INTEGER}, #{finishNumber,jdbcType=INTEGER}, 
      #{planDate,jdbcType=TIMESTAMP}, #{planFinishDate,jdbcType=TIMESTAMP}, #{actualFinishDate,jdbcType=TIMESTAMP}, 
      #{deliveryDate,jdbcType=VARCHAR}, #{planStatus,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{createUser,jdbcType=INTEGER}, 
      #{updateUser,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.ProductionDailyPlan" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into production_daily_plan
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="orderNo != null" >
        order_no,
      </if>
      <if test="orderNumber != null" >
        order_number,
      </if>
      <if test="finishNumber != null" >
        finish_number,
      </if>
      <if test="planDate != null" >
        plan_date,
      </if>
      <if test="planFinishDate != null" >
        plan_finish_date,
      </if>
      <if test="actualFinishDate != null" >
        actual_finish_date,
      </if>
      <if test="deliveryDate != null" >
        delivery_date,
      </if>
      <if test="planStatus != null" >
        plan_status,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="createUser != null" >
        create_user,
      </if>
      <if test="updateUser != null" >
        update_user,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="orderNo != null" >
        #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="orderNumber != null" >
        #{orderNumber,jdbcType=INTEGER},
      </if>
      <if test="finishNumber != null" >
        #{finishNumber,jdbcType=INTEGER},
      </if>
      <if test="planDate != null" >
        #{planDate,jdbcType=TIMESTAMP},
      </if>
      <if test="planFinishDate != null" >
        #{planFinishDate,jdbcType=TIMESTAMP},
      </if>
      <if test="actualFinishDate != null" >
        #{actualFinishDate,jdbcType=TIMESTAMP},
      </if>
      <if test="deliveryDate != null" >
        #{deliveryDate,jdbcType=VARCHAR},
      </if>
      <if test="planStatus != null" >
        #{planStatus,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        #{createUser,jdbcType=INTEGER},
      </if>
      <if test="updateUser != null" >
        #{updateUser,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.ProductionDailyPlanExample" resultType="java.lang.Integer" >
    select count(*) from production_daily_plan
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update production_daily_plan
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderNo != null" >
        order_no = #{record.orderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.orderNumber != null" >
        order_number = #{record.orderNumber,jdbcType=INTEGER},
      </if>
      <if test="record.finishNumber != null" >
        finish_number = #{record.finishNumber,jdbcType=INTEGER},
      </if>
      <if test="record.planDate != null" >
        plan_date = #{record.planDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.planFinishDate != null" >
        plan_finish_date = #{record.planFinishDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.actualFinishDate != null" >
        actual_finish_date = #{record.actualFinishDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deliveryDate != null" >
        delivery_date = #{record.deliveryDate,jdbcType=VARCHAR},
      </if>
      <if test="record.planStatus != null" >
        plan_status = #{record.planStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUser != null" >
        create_user = #{record.createUser,jdbcType=INTEGER},
      </if>
      <if test="record.updateUser != null" >
        update_user = #{record.updateUser,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update production_daily_plan
    set id = #{record.id,jdbcType=INTEGER},
      order_no = #{record.orderNo,jdbcType=VARCHAR},
      order_number = #{record.orderNumber,jdbcType=INTEGER},
      finish_number = #{record.finishNumber,jdbcType=INTEGER},
      plan_date = #{record.planDate,jdbcType=TIMESTAMP},
      plan_finish_date = #{record.planFinishDate,jdbcType=TIMESTAMP},
      actual_finish_date = #{record.actualFinishDate,jdbcType=TIMESTAMP},
      delivery_date = #{record.deliveryDate,jdbcType=VARCHAR},
      plan_status = #{record.planStatus,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_user = #{record.createUser,jdbcType=INTEGER},
      update_user = #{record.updateUser,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.ProductionDailyPlan" >
    update production_daily_plan
    <set >
      <if test="orderNo != null" >
        order_no = #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="orderNumber != null" >
        order_number = #{orderNumber,jdbcType=INTEGER},
      </if>
      <if test="finishNumber != null" >
        finish_number = #{finishNumber,jdbcType=INTEGER},
      </if>
      <if test="planDate != null" >
        plan_date = #{planDate,jdbcType=TIMESTAMP},
      </if>
      <if test="planFinishDate != null" >
        plan_finish_date = #{planFinishDate,jdbcType=TIMESTAMP},
      </if>
      <if test="actualFinishDate != null" >
        actual_finish_date = #{actualFinishDate,jdbcType=TIMESTAMP},
      </if>
      <if test="deliveryDate != null" >
        delivery_date = #{deliveryDate,jdbcType=VARCHAR},
      </if>
      <if test="planStatus != null" >
        plan_status = #{planStatus,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        create_user = #{createUser,jdbcType=INTEGER},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.ProductionDailyPlan" >
    update production_daily_plan
    set order_no = #{orderNo,jdbcType=VARCHAR},
      order_number = #{orderNumber,jdbcType=INTEGER},
      finish_number = #{finishNumber,jdbcType=INTEGER},
      plan_date = #{planDate,jdbcType=TIMESTAMP},
      plan_finish_date = #{planFinishDate,jdbcType=TIMESTAMP},
      actual_finish_date = #{actualFinishDate,jdbcType=TIMESTAMP},
      delivery_date = #{deliveryDate,jdbcType=VARCHAR},
      plan_status = #{planStatus,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=INTEGER},
      update_user = #{updateUser,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>