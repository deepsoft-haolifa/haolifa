<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.deepsoft.haolifa.dao.repository.MaterialReceiveRecordMapper">
  <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.MaterialReceiveRecord">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="create_user" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="update_user" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="receive_no" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="order_no" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="receive_department" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="receive_user_id" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="material_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="material_graph_no" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="material_price" javaType="java.math.BigDecimal" jdbcType="DECIMAL" />
      <arg column="start_material_count" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="start_material_amount" javaType="java.math.BigDecimal" jdbcType="DECIMAL" />
      <arg column="actual_material_count" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="actual_material_amount" javaType="java.math.BigDecimal" jdbcType="DECIMAL" />
      <arg column="end_material_count" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="end_material_amount" javaType="java.math.BigDecimal" jdbcType="DECIMAL" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, create_time, update_time, create_user, update_user, receive_no, order_no, receive_department, 
    receive_user_id, material_id, material_graph_no, material_price, start_material_count, 
    start_material_amount, actual_material_count, actual_material_amount, end_material_count, 
    end_material_amount
  </sql>
  <select id="selectByExample" parameterType="com.deepsoft.haolifa.model.domain.MaterialReceiveRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from material_receive_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from material_receive_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from material_receive_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.MaterialReceiveRecordExample">
    delete from material_receive_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.MaterialReceiveRecord">
    insert into material_receive_record (id, create_time, update_time, 
      create_user, update_user, receive_no, 
      order_no, receive_department, receive_user_id, 
      material_id, material_graph_no, material_price, 
      start_material_count, start_material_amount, actual_material_count, 
      actual_material_amount, end_material_count, end_material_amount
      )
    values (#{id,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{createUser,jdbcType=INTEGER}, #{updateUser,jdbcType=INTEGER}, #{receiveNo,jdbcType=CHAR}, 
      #{orderNo,jdbcType=CHAR}, #{receiveDepartment,jdbcType=VARCHAR}, #{receiveUserId,jdbcType=VARCHAR}, 
      #{materialId,jdbcType=INTEGER}, #{materialGraphNo,jdbcType=CHAR}, #{materialPrice,jdbcType=DECIMAL}, 
      #{startMaterialCount,jdbcType=CHAR}, #{startMaterialAmount,jdbcType=DECIMAL}, #{actualMaterialCount,jdbcType=CHAR}, 
      #{actualMaterialAmount,jdbcType=DECIMAL}, #{endMaterialCount,jdbcType=CHAR}, #{endMaterialAmount,jdbcType=DECIMAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.MaterialReceiveRecord">
    insert into material_receive_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
      <if test="receiveNo != null">
        receive_no,
      </if>
      <if test="orderNo != null">
        order_no,
      </if>
      <if test="receiveDepartment != null">
        receive_department,
      </if>
      <if test="receiveUserId != null">
        receive_user_id,
      </if>
      <if test="materialId != null">
        material_id,
      </if>
      <if test="materialGraphNo != null">
        material_graph_no,
      </if>
      <if test="materialPrice != null">
        material_price,
      </if>
      <if test="startMaterialCount != null">
        start_material_count,
      </if>
      <if test="startMaterialAmount != null">
        start_material_amount,
      </if>
      <if test="actualMaterialCount != null">
        actual_material_count,
      </if>
      <if test="actualMaterialAmount != null">
        actual_material_amount,
      </if>
      <if test="endMaterialCount != null">
        end_material_count,
      </if>
      <if test="endMaterialAmount != null">
        end_material_amount,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=INTEGER},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="receiveNo != null">
        #{receiveNo,jdbcType=CHAR},
      </if>
      <if test="orderNo != null">
        #{orderNo,jdbcType=CHAR},
      </if>
      <if test="receiveDepartment != null">
        #{receiveDepartment,jdbcType=VARCHAR},
      </if>
      <if test="receiveUserId != null">
        #{receiveUserId,jdbcType=VARCHAR},
      </if>
      <if test="materialId != null">
        #{materialId,jdbcType=INTEGER},
      </if>
      <if test="materialGraphNo != null">
        #{materialGraphNo,jdbcType=CHAR},
      </if>
      <if test="materialPrice != null">
        #{materialPrice,jdbcType=DECIMAL},
      </if>
      <if test="startMaterialCount != null">
        #{startMaterialCount,jdbcType=CHAR},
      </if>
      <if test="startMaterialAmount != null">
        #{startMaterialAmount,jdbcType=DECIMAL},
      </if>
      <if test="actualMaterialCount != null">
        #{actualMaterialCount,jdbcType=CHAR},
      </if>
      <if test="actualMaterialAmount != null">
        #{actualMaterialAmount,jdbcType=DECIMAL},
      </if>
      <if test="endMaterialCount != null">
        #{endMaterialCount,jdbcType=CHAR},
      </if>
      <if test="endMaterialAmount != null">
        #{endMaterialAmount,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.MaterialReceiveRecordExample" resultType="java.lang.Long">
    select count(*) from material_receive_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update material_receive_record
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUser != null">
        create_user = #{record.createUser,jdbcType=INTEGER},
      </if>
      <if test="record.updateUser != null">
        update_user = #{record.updateUser,jdbcType=INTEGER},
      </if>
      <if test="record.receiveNo != null">
        receive_no = #{record.receiveNo,jdbcType=CHAR},
      </if>
      <if test="record.orderNo != null">
        order_no = #{record.orderNo,jdbcType=CHAR},
      </if>
      <if test="record.receiveDepartment != null">
        receive_department = #{record.receiveDepartment,jdbcType=VARCHAR},
      </if>
      <if test="record.receiveUserId != null">
        receive_user_id = #{record.receiveUserId,jdbcType=VARCHAR},
      </if>
      <if test="record.materialId != null">
        material_id = #{record.materialId,jdbcType=INTEGER},
      </if>
      <if test="record.materialGraphNo != null">
        material_graph_no = #{record.materialGraphNo,jdbcType=CHAR},
      </if>
      <if test="record.materialPrice != null">
        material_price = #{record.materialPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.startMaterialCount != null">
        start_material_count = #{record.startMaterialCount,jdbcType=CHAR},
      </if>
      <if test="record.startMaterialAmount != null">
        start_material_amount = #{record.startMaterialAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.actualMaterialCount != null">
        actual_material_count = #{record.actualMaterialCount,jdbcType=CHAR},
      </if>
      <if test="record.actualMaterialAmount != null">
        actual_material_amount = #{record.actualMaterialAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.endMaterialCount != null">
        end_material_count = #{record.endMaterialCount,jdbcType=CHAR},
      </if>
      <if test="record.endMaterialAmount != null">
        end_material_amount = #{record.endMaterialAmount,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update material_receive_record
    set id = #{record.id,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_user = #{record.createUser,jdbcType=INTEGER},
      update_user = #{record.updateUser,jdbcType=INTEGER},
      receive_no = #{record.receiveNo,jdbcType=CHAR},
      order_no = #{record.orderNo,jdbcType=CHAR},
      receive_department = #{record.receiveDepartment,jdbcType=VARCHAR},
      receive_user_id = #{record.receiveUserId,jdbcType=VARCHAR},
      material_id = #{record.materialId,jdbcType=INTEGER},
      material_graph_no = #{record.materialGraphNo,jdbcType=CHAR},
      material_price = #{record.materialPrice,jdbcType=DECIMAL},
      start_material_count = #{record.startMaterialCount,jdbcType=CHAR},
      start_material_amount = #{record.startMaterialAmount,jdbcType=DECIMAL},
      actual_material_count = #{record.actualMaterialCount,jdbcType=CHAR},
      actual_material_amount = #{record.actualMaterialAmount,jdbcType=DECIMAL},
      end_material_count = #{record.endMaterialCount,jdbcType=CHAR},
      end_material_amount = #{record.endMaterialAmount,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.MaterialReceiveRecord">
    update material_receive_record
    <set>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=INTEGER},
      </if>
      <if test="updateUser != null">
        update_user = #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="receiveNo != null">
        receive_no = #{receiveNo,jdbcType=CHAR},
      </if>
      <if test="orderNo != null">
        order_no = #{orderNo,jdbcType=CHAR},
      </if>
      <if test="receiveDepartment != null">
        receive_department = #{receiveDepartment,jdbcType=VARCHAR},
      </if>
      <if test="receiveUserId != null">
        receive_user_id = #{receiveUserId,jdbcType=VARCHAR},
      </if>
      <if test="materialId != null">
        material_id = #{materialId,jdbcType=INTEGER},
      </if>
      <if test="materialGraphNo != null">
        material_graph_no = #{materialGraphNo,jdbcType=CHAR},
      </if>
      <if test="materialPrice != null">
        material_price = #{materialPrice,jdbcType=DECIMAL},
      </if>
      <if test="startMaterialCount != null">
        start_material_count = #{startMaterialCount,jdbcType=CHAR},
      </if>
      <if test="startMaterialAmount != null">
        start_material_amount = #{startMaterialAmount,jdbcType=DECIMAL},
      </if>
      <if test="actualMaterialCount != null">
        actual_material_count = #{actualMaterialCount,jdbcType=CHAR},
      </if>
      <if test="actualMaterialAmount != null">
        actual_material_amount = #{actualMaterialAmount,jdbcType=DECIMAL},
      </if>
      <if test="endMaterialCount != null">
        end_material_count = #{endMaterialCount,jdbcType=CHAR},
      </if>
      <if test="endMaterialAmount != null">
        end_material_amount = #{endMaterialAmount,jdbcType=DECIMAL},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.MaterialReceiveRecord">
    update material_receive_record
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=INTEGER},
      update_user = #{updateUser,jdbcType=INTEGER},
      receive_no = #{receiveNo,jdbcType=CHAR},
      order_no = #{orderNo,jdbcType=CHAR},
      receive_department = #{receiveDepartment,jdbcType=VARCHAR},
      receive_user_id = #{receiveUserId,jdbcType=VARCHAR},
      material_id = #{materialId,jdbcType=INTEGER},
      material_graph_no = #{materialGraphNo,jdbcType=CHAR},
      material_price = #{materialPrice,jdbcType=DECIMAL},
      start_material_count = #{startMaterialCount,jdbcType=CHAR},
      start_material_amount = #{startMaterialAmount,jdbcType=DECIMAL},
      actual_material_count = #{actualMaterialCount,jdbcType=CHAR},
      actual_material_amount = #{actualMaterialAmount,jdbcType=DECIMAL},
      end_material_count = #{endMaterialCount,jdbcType=CHAR},
      end_material_amount = #{endMaterialAmount,jdbcType=DECIMAL}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>