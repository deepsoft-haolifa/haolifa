<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.deepsoft.haolifa.dao.repository.ProInspectResultMapper">
  <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.ProInspectResult">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="inspect_no" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="order_no" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="testing_number" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="qualified_number" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="unqualified_number" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="storage_status" javaType="java.lang.Byte" jdbcType="TINYINT" />
      <arg column="testing_person" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="testing_unit" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="testing_process" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="technical_requirements" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="testing_result" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="inspector" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="inspecte_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="reason" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="responsible_department" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="department_leader" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="responsible_analyze_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="create_user_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, inspect_no, order_no, testing_number, qualified_number, unqualified_number, storage_status, 
    testing_person, testing_unit, testing_process, technical_requirements, testing_result, 
    inspector, inspecte_time, reason, responsible_department, department_leader, responsible_analyze_time, 
    create_time, update_time, create_user_id
  </sql>
  <select id="selectByExample" parameterType="com.deepsoft.haolifa.model.domain.ProInspectResultExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pro_inspect_result
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from pro_inspect_result
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from pro_inspect_result
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.ProInspectResultExample">
    delete from pro_inspect_result
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.ProInspectResult">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into pro_inspect_result (inspect_no, order_no, testing_number, 
      qualified_number, unqualified_number, storage_status, 
      testing_person, testing_unit, testing_process, 
      technical_requirements, testing_result, inspector, 
      inspecte_time, reason, responsible_department, 
      department_leader, responsible_analyze_time, 
      create_time, update_time, create_user_id
      )
    values (#{inspectNo,jdbcType=VARCHAR}, #{orderNo,jdbcType=VARCHAR}, #{testingNumber,jdbcType=INTEGER}, 
      #{qualifiedNumber,jdbcType=INTEGER}, #{unqualifiedNumber,jdbcType=INTEGER}, #{storageStatus,jdbcType=TINYINT}, 
      #{testingPerson,jdbcType=VARCHAR}, #{testingUnit,jdbcType=VARCHAR}, #{testingProcess,jdbcType=VARCHAR}, 
      #{technicalRequirements,jdbcType=VARCHAR}, #{testingResult,jdbcType=VARCHAR}, #{inspector,jdbcType=VARCHAR}, 
      #{inspecteTime,jdbcType=TIMESTAMP}, #{reason,jdbcType=VARCHAR}, #{responsibleDepartment,jdbcType=VARCHAR}, 
      #{departmentLeader,jdbcType=VARCHAR}, #{responsibleAnalyzeTime,jdbcType=TIMESTAMP}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{createUserId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.ProInspectResult">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into pro_inspect_result
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="inspectNo != null">
        inspect_no,
      </if>
      <if test="orderNo != null">
        order_no,
      </if>
      <if test="testingNumber != null">
        testing_number,
      </if>
      <if test="qualifiedNumber != null">
        qualified_number,
      </if>
      <if test="unqualifiedNumber != null">
        unqualified_number,
      </if>
      <if test="storageStatus != null">
        storage_status,
      </if>
      <if test="testingPerson != null">
        testing_person,
      </if>
      <if test="testingUnit != null">
        testing_unit,
      </if>
      <if test="testingProcess != null">
        testing_process,
      </if>
      <if test="technicalRequirements != null">
        technical_requirements,
      </if>
      <if test="testingResult != null">
        testing_result,
      </if>
      <if test="inspector != null">
        inspector,
      </if>
      <if test="inspecteTime != null">
        inspecte_time,
      </if>
      <if test="reason != null">
        reason,
      </if>
      <if test="responsibleDepartment != null">
        responsible_department,
      </if>
      <if test="departmentLeader != null">
        department_leader,
      </if>
      <if test="responsibleAnalyzeTime != null">
        responsible_analyze_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="createUserId != null">
        create_user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="inspectNo != null">
        #{inspectNo,jdbcType=VARCHAR},
      </if>
      <if test="orderNo != null">
        #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="testingNumber != null">
        #{testingNumber,jdbcType=INTEGER},
      </if>
      <if test="qualifiedNumber != null">
        #{qualifiedNumber,jdbcType=INTEGER},
      </if>
      <if test="unqualifiedNumber != null">
        #{unqualifiedNumber,jdbcType=INTEGER},
      </if>
      <if test="storageStatus != null">
        #{storageStatus,jdbcType=TINYINT},
      </if>
      <if test="testingPerson != null">
        #{testingPerson,jdbcType=VARCHAR},
      </if>
      <if test="testingUnit != null">
        #{testingUnit,jdbcType=VARCHAR},
      </if>
      <if test="testingProcess != null">
        #{testingProcess,jdbcType=VARCHAR},
      </if>
      <if test="technicalRequirements != null">
        #{technicalRequirements,jdbcType=VARCHAR},
      </if>
      <if test="testingResult != null">
        #{testingResult,jdbcType=VARCHAR},
      </if>
      <if test="inspector != null">
        #{inspector,jdbcType=VARCHAR},
      </if>
      <if test="inspecteTime != null">
        #{inspecteTime,jdbcType=TIMESTAMP},
      </if>
      <if test="reason != null">
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="responsibleDepartment != null">
        #{responsibleDepartment,jdbcType=VARCHAR},
      </if>
      <if test="departmentLeader != null">
        #{departmentLeader,jdbcType=VARCHAR},
      </if>
      <if test="responsibleAnalyzeTime != null">
        #{responsibleAnalyzeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.ProInspectResultExample" resultType="java.lang.Long">
    select count(*) from pro_inspect_result
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update pro_inspect_result
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.inspectNo != null">
        inspect_no = #{record.inspectNo,jdbcType=VARCHAR},
      </if>
      <if test="record.orderNo != null">
        order_no = #{record.orderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.testingNumber != null">
        testing_number = #{record.testingNumber,jdbcType=INTEGER},
      </if>
      <if test="record.qualifiedNumber != null">
        qualified_number = #{record.qualifiedNumber,jdbcType=INTEGER},
      </if>
      <if test="record.unqualifiedNumber != null">
        unqualified_number = #{record.unqualifiedNumber,jdbcType=INTEGER},
      </if>
      <if test="record.storageStatus != null">
        storage_status = #{record.storageStatus,jdbcType=TINYINT},
      </if>
      <if test="record.testingPerson != null">
        testing_person = #{record.testingPerson,jdbcType=VARCHAR},
      </if>
      <if test="record.testingUnit != null">
        testing_unit = #{record.testingUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.testingProcess != null">
        testing_process = #{record.testingProcess,jdbcType=VARCHAR},
      </if>
      <if test="record.technicalRequirements != null">
        technical_requirements = #{record.technicalRequirements,jdbcType=VARCHAR},
      </if>
      <if test="record.testingResult != null">
        testing_result = #{record.testingResult,jdbcType=VARCHAR},
      </if>
      <if test="record.inspector != null">
        inspector = #{record.inspector,jdbcType=VARCHAR},
      </if>
      <if test="record.inspecteTime != null">
        inspecte_time = #{record.inspecteTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.reason != null">
        reason = #{record.reason,jdbcType=VARCHAR},
      </if>
      <if test="record.responsibleDepartment != null">
        responsible_department = #{record.responsibleDepartment,jdbcType=VARCHAR},
      </if>
      <if test="record.departmentLeader != null">
        department_leader = #{record.departmentLeader,jdbcType=VARCHAR},
      </if>
      <if test="record.responsibleAnalyzeTime != null">
        responsible_analyze_time = #{record.responsibleAnalyzeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUserId != null">
        create_user_id = #{record.createUserId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update pro_inspect_result
    set id = #{record.id,jdbcType=INTEGER},
      inspect_no = #{record.inspectNo,jdbcType=VARCHAR},
      order_no = #{record.orderNo,jdbcType=VARCHAR},
      testing_number = #{record.testingNumber,jdbcType=INTEGER},
      qualified_number = #{record.qualifiedNumber,jdbcType=INTEGER},
      unqualified_number = #{record.unqualifiedNumber,jdbcType=INTEGER},
      storage_status = #{record.storageStatus,jdbcType=TINYINT},
      testing_person = #{record.testingPerson,jdbcType=VARCHAR},
      testing_unit = #{record.testingUnit,jdbcType=VARCHAR},
      testing_process = #{record.testingProcess,jdbcType=VARCHAR},
      technical_requirements = #{record.technicalRequirements,jdbcType=VARCHAR},
      testing_result = #{record.testingResult,jdbcType=VARCHAR},
      inspector = #{record.inspector,jdbcType=VARCHAR},
      inspecte_time = #{record.inspecteTime,jdbcType=TIMESTAMP},
      reason = #{record.reason,jdbcType=VARCHAR},
      responsible_department = #{record.responsibleDepartment,jdbcType=VARCHAR},
      department_leader = #{record.departmentLeader,jdbcType=VARCHAR},
      responsible_analyze_time = #{record.responsibleAnalyzeTime,jdbcType=TIMESTAMP},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_user_id = #{record.createUserId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.ProInspectResult">
    update pro_inspect_result
    <set>
      <if test="inspectNo != null">
        inspect_no = #{inspectNo,jdbcType=VARCHAR},
      </if>
      <if test="orderNo != null">
        order_no = #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="testingNumber != null">
        testing_number = #{testingNumber,jdbcType=INTEGER},
      </if>
      <if test="qualifiedNumber != null">
        qualified_number = #{qualifiedNumber,jdbcType=INTEGER},
      </if>
      <if test="unqualifiedNumber != null">
        unqualified_number = #{unqualifiedNumber,jdbcType=INTEGER},
      </if>
      <if test="storageStatus != null">
        storage_status = #{storageStatus,jdbcType=TINYINT},
      </if>
      <if test="testingPerson != null">
        testing_person = #{testingPerson,jdbcType=VARCHAR},
      </if>
      <if test="testingUnit != null">
        testing_unit = #{testingUnit,jdbcType=VARCHAR},
      </if>
      <if test="testingProcess != null">
        testing_process = #{testingProcess,jdbcType=VARCHAR},
      </if>
      <if test="technicalRequirements != null">
        technical_requirements = #{technicalRequirements,jdbcType=VARCHAR},
      </if>
      <if test="testingResult != null">
        testing_result = #{testingResult,jdbcType=VARCHAR},
      </if>
      <if test="inspector != null">
        inspector = #{inspector,jdbcType=VARCHAR},
      </if>
      <if test="inspecteTime != null">
        inspecte_time = #{inspecteTime,jdbcType=TIMESTAMP},
      </if>
      <if test="reason != null">
        reason = #{reason,jdbcType=VARCHAR},
      </if>
      <if test="responsibleDepartment != null">
        responsible_department = #{responsibleDepartment,jdbcType=VARCHAR},
      </if>
      <if test="departmentLeader != null">
        department_leader = #{departmentLeader,jdbcType=VARCHAR},
      </if>
      <if test="responsibleAnalyzeTime != null">
        responsible_analyze_time = #{responsibleAnalyzeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        create_user_id = #{createUserId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.ProInspectResult">
    update pro_inspect_result
    set inspect_no = #{inspectNo,jdbcType=VARCHAR},
      order_no = #{orderNo,jdbcType=VARCHAR},
      testing_number = #{testingNumber,jdbcType=INTEGER},
      qualified_number = #{qualifiedNumber,jdbcType=INTEGER},
      unqualified_number = #{unqualifiedNumber,jdbcType=INTEGER},
      storage_status = #{storageStatus,jdbcType=TINYINT},
      testing_person = #{testingPerson,jdbcType=VARCHAR},
      testing_unit = #{testingUnit,jdbcType=VARCHAR},
      testing_process = #{testingProcess,jdbcType=VARCHAR},
      technical_requirements = #{technicalRequirements,jdbcType=VARCHAR},
      testing_result = #{testingResult,jdbcType=VARCHAR},
      inspector = #{inspector,jdbcType=VARCHAR},
      inspecte_time = #{inspecteTime,jdbcType=TIMESTAMP},
      reason = #{reason,jdbcType=VARCHAR},
      responsible_department = #{responsibleDepartment,jdbcType=VARCHAR},
      department_leader = #{departmentLeader,jdbcType=VARCHAR},
      responsible_analyze_time = #{responsibleAnalyzeTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_user_id = #{createUserId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>