<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.deepsoft.haolifa.dao.repository.RejectMaterialRecordMapper" >
  <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.RejectMaterialRecord" >
    <constructor >
      <idArg column="id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="record_no" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="purchase_order_no" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="batch_number" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="material_graph_no" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="number" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="accept_number" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="entrust_number" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="back_number" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="status" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="inspect_id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="create_user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, record_no, purchase_order_no, batch_number, material_graph_no, number, accept_number, 
    entrust_number, back_number, status, inspect_id, create_time, update_time, create_user_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.deepsoft.haolifa.model.domain.RejectMaterialRecordExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from reject_material_record
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from reject_material_record
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from reject_material_record
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.RejectMaterialRecordExample" >
    delete from reject_material_record
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.RejectMaterialRecord" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into reject_material_record (record_no, purchase_order_no, batch_number, 
      material_graph_no, number, accept_number, 
      entrust_number, back_number, status, 
      inspect_id, create_time, update_time, 
      create_user_id)
    values (#{recordNo,jdbcType=VARCHAR}, #{purchaseOrderNo,jdbcType=VARCHAR}, #{batchNumber,jdbcType=VARCHAR}, 
      #{materialGraphNo,jdbcType=VARCHAR}, #{number,jdbcType=INTEGER}, #{acceptNumber,jdbcType=INTEGER}, 
      #{entrustNumber,jdbcType=INTEGER}, #{backNumber,jdbcType=INTEGER}, #{status,jdbcType=TINYINT}, 
      #{inspectId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{createUserId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.RejectMaterialRecord" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into reject_material_record
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="recordNo != null" >
        record_no,
      </if>
      <if test="purchaseOrderNo != null" >
        purchase_order_no,
      </if>
      <if test="batchNumber != null" >
        batch_number,
      </if>
      <if test="materialGraphNo != null" >
        material_graph_no,
      </if>
      <if test="number != null" >
        number,
      </if>
      <if test="acceptNumber != null" >
        accept_number,
      </if>
      <if test="entrustNumber != null" >
        entrust_number,
      </if>
      <if test="backNumber != null" >
        back_number,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="inspectId != null" >
        inspect_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="createUserId != null" >
        create_user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="recordNo != null" >
        #{recordNo,jdbcType=VARCHAR},
      </if>
      <if test="purchaseOrderNo != null" >
        #{purchaseOrderNo,jdbcType=VARCHAR},
      </if>
      <if test="batchNumber != null" >
        #{batchNumber,jdbcType=VARCHAR},
      </if>
      <if test="materialGraphNo != null" >
        #{materialGraphNo,jdbcType=VARCHAR},
      </if>
      <if test="number != null" >
        #{number,jdbcType=INTEGER},
      </if>
      <if test="acceptNumber != null" >
        #{acceptNumber,jdbcType=INTEGER},
      </if>
      <if test="entrustNumber != null" >
        #{entrustNumber,jdbcType=INTEGER},
      </if>
      <if test="backNumber != null" >
        #{backNumber,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="inspectId != null" >
        #{inspectId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null" >
        #{createUserId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.RejectMaterialRecordExample" resultType="java.lang.Integer" >
    select count(*) from reject_material_record
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update reject_material_record
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.recordNo != null" >
        record_no = #{record.recordNo,jdbcType=VARCHAR},
      </if>
      <if test="record.purchaseOrderNo != null" >
        purchase_order_no = #{record.purchaseOrderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.batchNumber != null" >
        batch_number = #{record.batchNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.materialGraphNo != null" >
        material_graph_no = #{record.materialGraphNo,jdbcType=VARCHAR},
      </if>
      <if test="record.number != null" >
        number = #{record.number,jdbcType=INTEGER},
      </if>
      <if test="record.acceptNumber != null" >
        accept_number = #{record.acceptNumber,jdbcType=INTEGER},
      </if>
      <if test="record.entrustNumber != null" >
        entrust_number = #{record.entrustNumber,jdbcType=INTEGER},
      </if>
      <if test="record.backNumber != null" >
        back_number = #{record.backNumber,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.inspectId != null" >
        inspect_id = #{record.inspectId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUserId != null" >
        create_user_id = #{record.createUserId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update reject_material_record
    set id = #{record.id,jdbcType=BIGINT},
      record_no = #{record.recordNo,jdbcType=VARCHAR},
      purchase_order_no = #{record.purchaseOrderNo,jdbcType=VARCHAR},
      batch_number = #{record.batchNumber,jdbcType=VARCHAR},
      material_graph_no = #{record.materialGraphNo,jdbcType=VARCHAR},
      number = #{record.number,jdbcType=INTEGER},
      accept_number = #{record.acceptNumber,jdbcType=INTEGER},
      entrust_number = #{record.entrustNumber,jdbcType=INTEGER},
      back_number = #{record.backNumber,jdbcType=INTEGER},
      status = #{record.status,jdbcType=TINYINT},
      inspect_id = #{record.inspectId,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_user_id = #{record.createUserId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.RejectMaterialRecord" >
    update reject_material_record
    <set >
      <if test="recordNo != null" >
        record_no = #{recordNo,jdbcType=VARCHAR},
      </if>
      <if test="purchaseOrderNo != null" >
        purchase_order_no = #{purchaseOrderNo,jdbcType=VARCHAR},
      </if>
      <if test="batchNumber != null" >
        batch_number = #{batchNumber,jdbcType=VARCHAR},
      </if>
      <if test="materialGraphNo != null" >
        material_graph_no = #{materialGraphNo,jdbcType=VARCHAR},
      </if>
      <if test="number != null" >
        number = #{number,jdbcType=INTEGER},
      </if>
      <if test="acceptNumber != null" >
        accept_number = #{acceptNumber,jdbcType=INTEGER},
      </if>
      <if test="entrustNumber != null" >
        entrust_number = #{entrustNumber,jdbcType=INTEGER},
      </if>
      <if test="backNumber != null" >
        back_number = #{backNumber,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="inspectId != null" >
        inspect_id = #{inspectId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null" >
        create_user_id = #{createUserId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.RejectMaterialRecord" >
    update reject_material_record
    set record_no = #{recordNo,jdbcType=VARCHAR},
      purchase_order_no = #{purchaseOrderNo,jdbcType=VARCHAR},
      batch_number = #{batchNumber,jdbcType=VARCHAR},
      material_graph_no = #{materialGraphNo,jdbcType=VARCHAR},
      number = #{number,jdbcType=INTEGER},
      accept_number = #{acceptNumber,jdbcType=INTEGER},
      entrust_number = #{entrustNumber,jdbcType=INTEGER},
      back_number = #{backNumber,jdbcType=INTEGER},
      status = #{status,jdbcType=TINYINT},
      inspect_id = #{inspectId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_user_id = #{createUserId,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>