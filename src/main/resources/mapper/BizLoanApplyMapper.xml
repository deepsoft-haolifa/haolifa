<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.deepsoft.haolifa.dao.repository.BizLoanApplyMapper" >
  <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.BizLoanApply" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="serial_no" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="dept_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="loan_date" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="expect_repayment_date" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="amount" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="purpose" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="loan_user" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="amount_type" jdbcType="CHAR" javaType="java.lang.String" />
      <arg column="bill_nature" jdbcType="CHAR" javaType="java.lang.String" />
      <arg column="account_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="card_number" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="bank_of_deposit" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="apply_status" jdbcType="CHAR" javaType="java.lang.String" />
      <arg column="pay_company" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="pay_company_id" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="pay_account" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="pay_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="pay_status" jdbcType="CHAR" javaType="java.lang.String" />
      <arg column="remark" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="del_flag" jdbcType="CHAR" javaType="java.lang.String" />
      <arg column="create_user" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_user" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, serial_no, dept_id, loan_date, expect_repayment_date, amount, purpose, loan_user, 
    amount_type, bill_nature, account_name, card_number, bank_of_deposit, apply_status, 
    pay_company, pay_company_id, pay_account, pay_time, pay_status, remark, del_flag, 
    create_user, create_time, update_user, update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.deepsoft.haolifa.model.domain.BizLoanApplyExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from biz_loan_apply
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from biz_loan_apply
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from biz_loan_apply
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.BizLoanApplyExample" >
    delete from biz_loan_apply
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.BizLoanApply" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into biz_loan_apply (serial_no, dept_id, loan_date, 
      expect_repayment_date, amount, purpose, 
      loan_user, amount_type, bill_nature, 
      account_name, card_number, bank_of_deposit, 
      apply_status, pay_company, pay_company_id, 
      pay_account, pay_time, pay_status, 
      remark, del_flag, create_user, 
      create_time, update_user, update_time
      )
    values (#{serialNo,jdbcType=VARCHAR}, #{deptId,jdbcType=INTEGER}, #{loanDate,jdbcType=TIMESTAMP}, 
      #{expectRepaymentDate,jdbcType=TIMESTAMP}, #{amount,jdbcType=DECIMAL}, #{purpose,jdbcType=VARCHAR}, 
      #{loanUser,jdbcType=INTEGER}, #{amountType,jdbcType=CHAR}, #{billNature,jdbcType=CHAR}, 
      #{accountName,jdbcType=VARCHAR}, #{cardNumber,jdbcType=VARCHAR}, #{bankOfDeposit,jdbcType=VARCHAR}, 
      #{applyStatus,jdbcType=CHAR}, #{payCompany,jdbcType=VARCHAR}, #{payCompanyId,jdbcType=VARCHAR}, 
      #{payAccount,jdbcType=VARCHAR}, #{payTime,jdbcType=TIMESTAMP}, #{payStatus,jdbcType=CHAR}, 
      #{remark,jdbcType=VARCHAR}, #{delFlag,jdbcType=CHAR}, #{createUser,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateUser,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.BizLoanApply" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into biz_loan_apply
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="serialNo != null" >
        serial_no,
      </if>
      <if test="deptId != null" >
        dept_id,
      </if>
      <if test="loanDate != null" >
        loan_date,
      </if>
      <if test="expectRepaymentDate != null" >
        expect_repayment_date,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="purpose != null" >
        purpose,
      </if>
      <if test="loanUser != null" >
        loan_user,
      </if>
      <if test="amountType != null" >
        amount_type,
      </if>
      <if test="billNature != null" >
        bill_nature,
      </if>
      <if test="accountName != null" >
        account_name,
      </if>
      <if test="cardNumber != null" >
        card_number,
      </if>
      <if test="bankOfDeposit != null" >
        bank_of_deposit,
      </if>
      <if test="applyStatus != null" >
        apply_status,
      </if>
      <if test="payCompany != null" >
        pay_company,
      </if>
      <if test="payCompanyId != null" >
        pay_company_id,
      </if>
      <if test="payAccount != null" >
        pay_account,
      </if>
      <if test="payTime != null" >
        pay_time,
      </if>
      <if test="payStatus != null" >
        pay_status,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="delFlag != null" >
        del_flag,
      </if>
      <if test="createUser != null" >
        create_user,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateUser != null" >
        update_user,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="serialNo != null" >
        #{serialNo,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null" >
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="loanDate != null" >
        #{loanDate,jdbcType=TIMESTAMP},
      </if>
      <if test="expectRepaymentDate != null" >
        #{expectRepaymentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="purpose != null" >
        #{purpose,jdbcType=VARCHAR},
      </if>
      <if test="loanUser != null" >
        #{loanUser,jdbcType=INTEGER},
      </if>
      <if test="amountType != null" >
        #{amountType,jdbcType=CHAR},
      </if>
      <if test="billNature != null" >
        #{billNature,jdbcType=CHAR},
      </if>
      <if test="accountName != null" >
        #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="cardNumber != null" >
        #{cardNumber,jdbcType=VARCHAR},
      </if>
      <if test="bankOfDeposit != null" >
        #{bankOfDeposit,jdbcType=VARCHAR},
      </if>
      <if test="applyStatus != null" >
        #{applyStatus,jdbcType=CHAR},
      </if>
      <if test="payCompany != null" >
        #{payCompany,jdbcType=VARCHAR},
      </if>
      <if test="payCompanyId != null" >
        #{payCompanyId,jdbcType=VARCHAR},
      </if>
      <if test="payAccount != null" >
        #{payAccount,jdbcType=VARCHAR},
      </if>
      <if test="payTime != null" >
        #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payStatus != null" >
        #{payStatus,jdbcType=CHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null" >
        #{delFlag,jdbcType=CHAR},
      </if>
      <if test="createUser != null" >
        #{createUser,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.BizLoanApplyExample" resultType="java.lang.Integer" >
    select count(*) from biz_loan_apply
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update biz_loan_apply
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.serialNo != null" >
        serial_no = #{record.serialNo,jdbcType=VARCHAR},
      </if>
      <if test="record.deptId != null" >
        dept_id = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.loanDate != null" >
        loan_date = #{record.loanDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.expectRepaymentDate != null" >
        expect_repayment_date = #{record.expectRepaymentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.amount != null" >
        amount = #{record.amount,jdbcType=DECIMAL},
      </if>
      <if test="record.purpose != null" >
        purpose = #{record.purpose,jdbcType=VARCHAR},
      </if>
      <if test="record.loanUser != null" >
        loan_user = #{record.loanUser,jdbcType=INTEGER},
      </if>
      <if test="record.amountType != null" >
        amount_type = #{record.amountType,jdbcType=CHAR},
      </if>
      <if test="record.billNature != null" >
        bill_nature = #{record.billNature,jdbcType=CHAR},
      </if>
      <if test="record.accountName != null" >
        account_name = #{record.accountName,jdbcType=VARCHAR},
      </if>
      <if test="record.cardNumber != null" >
        card_number = #{record.cardNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.bankOfDeposit != null" >
        bank_of_deposit = #{record.bankOfDeposit,jdbcType=VARCHAR},
      </if>
      <if test="record.applyStatus != null" >
        apply_status = #{record.applyStatus,jdbcType=CHAR},
      </if>
      <if test="record.payCompany != null" >
        pay_company = #{record.payCompany,jdbcType=VARCHAR},
      </if>
      <if test="record.payCompanyId != null" >
        pay_company_id = #{record.payCompanyId,jdbcType=VARCHAR},
      </if>
      <if test="record.payAccount != null" >
        pay_account = #{record.payAccount,jdbcType=VARCHAR},
      </if>
      <if test="record.payTime != null" >
        pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.payStatus != null" >
        pay_status = #{record.payStatus,jdbcType=CHAR},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.delFlag != null" >
        del_flag = #{record.delFlag,jdbcType=CHAR},
      </if>
      <if test="record.createUser != null" >
        create_user = #{record.createUser,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateUser != null" >
        update_user = #{record.updateUser,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update biz_loan_apply
    set id = #{record.id,jdbcType=INTEGER},
      serial_no = #{record.serialNo,jdbcType=VARCHAR},
      dept_id = #{record.deptId,jdbcType=INTEGER},
      loan_date = #{record.loanDate,jdbcType=TIMESTAMP},
      expect_repayment_date = #{record.expectRepaymentDate,jdbcType=TIMESTAMP},
      amount = #{record.amount,jdbcType=DECIMAL},
      purpose = #{record.purpose,jdbcType=VARCHAR},
      loan_user = #{record.loanUser,jdbcType=INTEGER},
      amount_type = #{record.amountType,jdbcType=CHAR},
      bill_nature = #{record.billNature,jdbcType=CHAR},
      account_name = #{record.accountName,jdbcType=VARCHAR},
      card_number = #{record.cardNumber,jdbcType=VARCHAR},
      bank_of_deposit = #{record.bankOfDeposit,jdbcType=VARCHAR},
      apply_status = #{record.applyStatus,jdbcType=CHAR},
      pay_company = #{record.payCompany,jdbcType=VARCHAR},
      pay_company_id = #{record.payCompanyId,jdbcType=VARCHAR},
      pay_account = #{record.payAccount,jdbcType=VARCHAR},
      pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      pay_status = #{record.payStatus,jdbcType=CHAR},
      remark = #{record.remark,jdbcType=VARCHAR},
      del_flag = #{record.delFlag,jdbcType=CHAR},
      create_user = #{record.createUser,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_user = #{record.updateUser,jdbcType=INTEGER},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.BizLoanApply" >
    update biz_loan_apply
    <set >
      <if test="serialNo != null" >
        serial_no = #{serialNo,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null" >
        dept_id = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="loanDate != null" >
        loan_date = #{loanDate,jdbcType=TIMESTAMP},
      </if>
      <if test="expectRepaymentDate != null" >
        expect_repayment_date = #{expectRepaymentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="purpose != null" >
        purpose = #{purpose,jdbcType=VARCHAR},
      </if>
      <if test="loanUser != null" >
        loan_user = #{loanUser,jdbcType=INTEGER},
      </if>
      <if test="amountType != null" >
        amount_type = #{amountType,jdbcType=CHAR},
      </if>
      <if test="billNature != null" >
        bill_nature = #{billNature,jdbcType=CHAR},
      </if>
      <if test="accountName != null" >
        account_name = #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="cardNumber != null" >
        card_number = #{cardNumber,jdbcType=VARCHAR},
      </if>
      <if test="bankOfDeposit != null" >
        bank_of_deposit = #{bankOfDeposit,jdbcType=VARCHAR},
      </if>
      <if test="applyStatus != null" >
        apply_status = #{applyStatus,jdbcType=CHAR},
      </if>
      <if test="payCompany != null" >
        pay_company = #{payCompany,jdbcType=VARCHAR},
      </if>
      <if test="payCompanyId != null" >
        pay_company_id = #{payCompanyId,jdbcType=VARCHAR},
      </if>
      <if test="payAccount != null" >
        pay_account = #{payAccount,jdbcType=VARCHAR},
      </if>
      <if test="payTime != null" >
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payStatus != null" >
        pay_status = #{payStatus,jdbcType=CHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null" >
        del_flag = #{delFlag,jdbcType=CHAR},
      </if>
      <if test="createUser != null" >
        create_user = #{createUser,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.BizLoanApply" >
    update biz_loan_apply
    set serial_no = #{serialNo,jdbcType=VARCHAR},
      dept_id = #{deptId,jdbcType=INTEGER},
      loan_date = #{loanDate,jdbcType=TIMESTAMP},
      expect_repayment_date = #{expectRepaymentDate,jdbcType=TIMESTAMP},
      amount = #{amount,jdbcType=DECIMAL},
      purpose = #{purpose,jdbcType=VARCHAR},
      loan_user = #{loanUser,jdbcType=INTEGER},
      amount_type = #{amountType,jdbcType=CHAR},
      bill_nature = #{billNature,jdbcType=CHAR},
      account_name = #{accountName,jdbcType=VARCHAR},
      card_number = #{cardNumber,jdbcType=VARCHAR},
      bank_of_deposit = #{bankOfDeposit,jdbcType=VARCHAR},
      apply_status = #{applyStatus,jdbcType=CHAR},
      pay_company = #{payCompany,jdbcType=VARCHAR},
      pay_company_id = #{payCompanyId,jdbcType=VARCHAR},
      pay_account = #{payAccount,jdbcType=VARCHAR},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      pay_status = #{payStatus,jdbcType=CHAR},
      remark = #{remark,jdbcType=VARCHAR},
      del_flag = #{delFlag,jdbcType=CHAR},
      create_user = #{createUser,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>