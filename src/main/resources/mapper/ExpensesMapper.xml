<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.deepsoft.haolifa.dao.repository.ExpensesMapper">
    <resultMap id="BaseResultMap" type="com.deepsoft.haolifa.model.domain.Expenses">
        <constructor>
            <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="total_amount" jdbcType="DECIMAL" javaType="java.math.BigDecimal"/>
            <arg column="second_classify" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="expenses_classify" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="create_user_id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="commit_user" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="is_delete" jdbcType="TINYINT" javaType="java.lang.Byte"/>
            <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
            <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
            <arg column="department" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="summary" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="remark" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="voucher_no" jdbcType="VARCHAR" javaType="java.lang.String"/>
        </constructor>
    </resultMap>
    <resultMap id="reportMap" type="com.deepsoft.haolifa.model.domain.ExpensesReport">
        <constructor>
            <arg column="total_amount" jdbcType="DECIMAL" javaType="java.math.BigDecimal"/>
            <arg column="second_classify" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="expenses_classify" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="create_time" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="department" jdbcType="VARCHAR" javaType="java.lang.String"/>
        </constructor>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, total_amount, second_classify, expenses_classify, create_user_id, commit_user, 
    is_delete, create_time, update_time, department, summary, remark, voucher_no
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap"
            parameterType="com.deepsoft.haolifa.model.domain.ExpensesExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from expenses
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from expenses
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from expenses
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.deepsoft.haolifa.model.domain.ExpensesExample">
        delete from expenses
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.deepsoft.haolifa.model.domain.Expenses">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into expenses (total_amount, second_classify, expenses_classify,
        create_user_id, commit_user, is_delete,
        create_time, update_time, department,
        summary, remark, voucher_no
        )
        values (#{totalAmount,jdbcType=DECIMAL}, #{secondClassify,jdbcType=VARCHAR},
        #{expensesClassify,jdbcType=VARCHAR},
        #{createUserId,jdbcType=INTEGER}, #{commitUser,jdbcType=VARCHAR}, #{isDelete,jdbcType=TINYINT},
        #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{department,jdbcType=VARCHAR},
        #{summary,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}, #{voucherNo,jdbcType=VARCHAR}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.deepsoft.haolifa.model.domain.Expenses">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into expenses
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="totalAmount != null">
                total_amount,
            </if>
            <if test="secondClassify != null">
                second_classify,
            </if>
            <if test="expensesClassify != null">
                expenses_classify,
            </if>
            <if test="createUserId != null">
                create_user_id,
            </if>
            <if test="commitUser != null">
                commit_user,
            </if>
            <if test="isDelete != null">
                is_delete,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="department != null">
                department,
            </if>
            <if test="summary != null">
                summary,
            </if>
            <if test="remark != null">
                remark,
            </if>
            <if test="voucherNo != null">
                voucher_no,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="totalAmount != null">
                #{totalAmount,jdbcType=DECIMAL},
            </if>
            <if test="secondClassify != null">
                #{secondClassify,jdbcType=VARCHAR},
            </if>
            <if test="expensesClassify != null">
                #{expensesClassify,jdbcType=VARCHAR},
            </if>
            <if test="createUserId != null">
                #{createUserId,jdbcType=INTEGER},
            </if>
            <if test="commitUser != null">
                #{commitUser,jdbcType=VARCHAR},
            </if>
            <if test="isDelete != null">
                #{isDelete,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="department != null">
                #{department,jdbcType=VARCHAR},
            </if>
            <if test="summary != null">
                #{summary,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="voucherNo != null">
                #{voucherNo,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.deepsoft.haolifa.model.domain.ExpensesExample"
            resultType="java.lang.Integer">
        select count(*) from expenses
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update expenses
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.totalAmount != null">
                total_amount = #{record.totalAmount,jdbcType=DECIMAL},
            </if>
            <if test="record.secondClassify != null">
                second_classify = #{record.secondClassify,jdbcType=VARCHAR},
            </if>
            <if test="record.expensesClassify != null">
                expenses_classify = #{record.expensesClassify,jdbcType=VARCHAR},
            </if>
            <if test="record.createUserId != null">
                create_user_id = #{record.createUserId,jdbcType=INTEGER},
            </if>
            <if test="record.commitUser != null">
                commit_user = #{record.commitUser,jdbcType=VARCHAR},
            </if>
            <if test="record.isDelete != null">
                is_delete = #{record.isDelete,jdbcType=TINYINT},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.department != null">
                department = #{record.department,jdbcType=VARCHAR},
            </if>
            <if test="record.summary != null">
                summary = #{record.summary,jdbcType=VARCHAR},
            </if>
            <if test="record.remark != null">
                remark = #{record.remark,jdbcType=VARCHAR},
            </if>
            <if test="record.voucherNo != null">
                voucher_no = #{record.voucherNo,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update expenses
        set id = #{record.id,jdbcType=INTEGER},
        total_amount = #{record.totalAmount,jdbcType=DECIMAL},
        second_classify = #{record.secondClassify,jdbcType=VARCHAR},
        expenses_classify = #{record.expensesClassify,jdbcType=VARCHAR},
        create_user_id = #{record.createUserId,jdbcType=INTEGER},
        commit_user = #{record.commitUser,jdbcType=VARCHAR},
        is_delete = #{record.isDelete,jdbcType=TINYINT},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        department = #{record.department,jdbcType=VARCHAR},
        summary = #{record.summary,jdbcType=VARCHAR},
        remark = #{record.remark,jdbcType=VARCHAR},
        voucher_no = #{record.voucherNo,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.deepsoft.haolifa.model.domain.Expenses">
        update expenses
        <set>
            <if test="totalAmount != null">
                total_amount = #{totalAmount,jdbcType=DECIMAL},
            </if>
            <if test="secondClassify != null">
                second_classify = #{secondClassify,jdbcType=VARCHAR},
            </if>
            <if test="expensesClassify != null">
                expenses_classify = #{expensesClassify,jdbcType=VARCHAR},
            </if>
            <if test="createUserId != null">
                create_user_id = #{createUserId,jdbcType=INTEGER},
            </if>
            <if test="commitUser != null">
                commit_user = #{commitUser,jdbcType=VARCHAR},
            </if>
            <if test="isDelete != null">
                is_delete = #{isDelete,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="department != null">
                department = #{department,jdbcType=VARCHAR},
            </if>
            <if test="summary != null">
                summary = #{summary,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="voucherNo != null">
                voucher_no = #{voucherNo,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.deepsoft.haolifa.model.domain.Expenses">
    update expenses
    set total_amount = #{totalAmount,jdbcType=DECIMAL},
      second_classify = #{secondClassify,jdbcType=VARCHAR},
      expenses_classify = #{expensesClassify,jdbcType=VARCHAR},
      create_user_id = #{createUserId,jdbcType=INTEGER},
      commit_user = #{commitUser,jdbcType=VARCHAR},
      is_delete = #{isDelete,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      department = #{department,jdbcType=VARCHAR},
      summary = #{summary,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      voucher_no = #{voucherNo,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <select id="getClassify" resultMap="reportMap" parameterType="java.lang.Integer">
   select sum(total_amount) total_amount,second_classify, FROM_UNIXTIME(UNIX_TIMESTAMP(create_time),"%Y-%m") as create_time,expenses_classify,department from expenses group by expenses_classify,FROM_UNIXTIME(UNIX_TIMESTAMP(create_time),"%Y-%m")
  </select>
    <select id="classifyByDepartment" resultMap="reportMap" parameterType="java.lang.Integer">
   select sum(total_amount) total_amount,second_classify, FROM_UNIXTIME(UNIX_TIMESTAMP(create_time),"%Y-%m") as create_time,expenses_classify,department from expenses group by expenses_classify,department
  </select> <select id="classifyBySecondDepartment" resultMap="reportMap" parameterType="java.lang.Integer">
   select sum(total_amount) total_amount,second_classify, FROM_UNIXTIME(UNIX_TIMESTAMP(create_time),"%Y-%m") as create_time,expenses_classify,department from expenses group by second_classify,FROM_UNIXTIME(UNIX_TIMESTAMP(create_time),"%Y-%m")
  </select>
</mapper>